// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package storage

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *CarfileInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{175}); err != nil {
		return err
	}

	// t.ID (string) (string)
	if len("ID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ID")); err != nil {
		return err
	}

	if len(t.ID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ID)); err != nil {
		return err
	}

	// t.State (storage.CarfileState) (string)
	if len("State") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"State\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("State"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("State")); err != nil {
		return err
	}

	if len(t.State) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.State was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.State))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.State)); err != nil {
		return err
	}

	// t.CarfileHash (storage.CarfileHash) (string)
	if len("CarfileHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CarfileHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CarfileHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CarfileHash")); err != nil {
		return err
	}

	if len(t.CarfileHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CarfileHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CarfileHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CarfileHash)); err != nil {
		return err
	}

	// t.CarfileCID (string) (string)
	if len("CarfileCID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CarfileCID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CarfileCID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CarfileCID")); err != nil {
		return err
	}

	if len(t.CarfileCID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CarfileCID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CarfileCID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CarfileCID)); err != nil {
		return err
	}

	// t.EdgeReplicas (int64) (int64)
	if len("EdgeReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"EdgeReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("EdgeReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("EdgeReplicas")); err != nil {
		return err
	}

	if t.EdgeReplicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.EdgeReplicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.EdgeReplicas-1)); err != nil {
			return err
		}
	}

	// t.ServerID (string) (string)
	if len("ServerID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ServerID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ServerID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ServerID")); err != nil {
		return err
	}

	if len(t.ServerID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ServerID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ServerID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ServerID)); err != nil {
		return err
	}

	// t.Size (int64) (int64)
	if len("Size") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Size\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Size"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Size")); err != nil {
		return err
	}

	if t.Size >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Size)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Size-1)); err != nil {
			return err
		}
	}

	// t.Blocks (int64) (int64)
	if len("Blocks") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Blocks\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Blocks"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Blocks")); err != nil {
		return err
	}

	if t.Blocks >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Blocks)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Blocks-1)); err != nil {
			return err
		}
	}

	// t.CandidateReplicas (int64) (int64)
	if len("CandidateReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CandidateReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CandidateReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CandidateReplicas")); err != nil {
		return err
	}

	if t.CandidateReplicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CandidateReplicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CandidateReplicas-1)); err != nil {
			return err
		}
	}

	// t.CreatedAt (int64) (int64)
	if len("CreatedAt") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CreatedAt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CreatedAt"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CreatedAt")); err != nil {
		return err
	}

	if t.CreatedAt >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CreatedAt)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CreatedAt-1)); err != nil {
			return err
		}
	}

	// t.Expiration (int64) (int64)
	if len("Expiration") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Expiration\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Expiration"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Expiration")); err != nil {
		return err
	}

	if t.Expiration >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Expiration)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Expiration-1)); err != nil {
			return err
		}
	}

	// t.SucceedEdgeReplicas (int64) (int64)
	if len("SucceedEdgeReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"SucceedEdgeReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("SucceedEdgeReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("SucceedEdgeReplicas")); err != nil {
		return err
	}

	if t.SucceedEdgeReplicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.SucceedEdgeReplicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.SucceedEdgeReplicas-1)); err != nil {
			return err
		}
	}

	// t.SucceedCandidateReplicas (int64) (int64)
	if len("SucceedCandidateReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"SucceedCandidateReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("SucceedCandidateReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("SucceedCandidateReplicas")); err != nil {
		return err
	}

	if t.SucceedCandidateReplicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.SucceedCandidateReplicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.SucceedCandidateReplicas-1)); err != nil {
			return err
		}
	}

	// t.FailedEdgeReplicas (int64) (int64)
	if len("FailedEdgeReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"FailedEdgeReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("FailedEdgeReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("FailedEdgeReplicas")); err != nil {
		return err
	}

	if t.FailedEdgeReplicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.FailedEdgeReplicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.FailedEdgeReplicas-1)); err != nil {
			return err
		}
	}

	// t.FailedCandidateReplicas (int64) (int64)
	if len("FailedCandidateReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"FailedCandidateReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("FailedCandidateReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("FailedCandidateReplicas")); err != nil {
		return err
	}

	if t.FailedCandidateReplicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.FailedCandidateReplicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.FailedCandidateReplicas-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *CarfileInfo) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CarfileInfo{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("CarfileInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.ID (string) (string)
		case "ID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ID = string(sval)
			}
			// t.State (storage.CarfileState) (string)
		case "State":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.State = CarfileState(sval)
			}
			// t.CarfileHash (storage.CarfileHash) (string)
		case "CarfileHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CarfileHash = CarfileHash(sval)
			}
			// t.CarfileCID (string) (string)
		case "CarfileCID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CarfileCID = string(sval)
			}
			// t.EdgeReplicas (int64) (int64)
		case "EdgeReplicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.EdgeReplicas = int64(extraI)
			}
			// t.ServerID (string) (string)
		case "ServerID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ServerID = string(sval)
			}
			// t.Size (int64) (int64)
		case "Size":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Size = int64(extraI)
			}
			// t.Blocks (int64) (int64)
		case "Blocks":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Blocks = int64(extraI)
			}
			// t.CandidateReplicas (int64) (int64)
		case "CandidateReplicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CandidateReplicas = int64(extraI)
			}
			// t.CreatedAt (int64) (int64)
		case "CreatedAt":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CreatedAt = int64(extraI)
			}
			// t.Expiration (int64) (int64)
		case "Expiration":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Expiration = int64(extraI)
			}
			// t.SucceedEdgeReplicas (int64) (int64)
		case "SucceedEdgeReplicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.SucceedEdgeReplicas = int64(extraI)
			}
			// t.SucceedCandidateReplicas (int64) (int64)
		case "SucceedCandidateReplicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.SucceedCandidateReplicas = int64(extraI)
			}
			// t.FailedEdgeReplicas (int64) (int64)
		case "FailedEdgeReplicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.FailedEdgeReplicas = int64(extraI)
			}
			// t.FailedCandidateReplicas (int64) (int64)
		case "FailedCandidateReplicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.FailedCandidateReplicas = int64(extraI)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *CacheResultInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{165}); err != nil {
		return err
	}

	// t.Status (int64) (int64)
	if len("Status") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Status\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Status"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Status")); err != nil {
		return err
	}

	if t.Status >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Status)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Status-1)); err != nil {
			return err
		}
	}

	// t.CarfileBlockCount (int64) (int64)
	if len("CarfileBlockCount") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CarfileBlockCount\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CarfileBlockCount"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CarfileBlockCount")); err != nil {
		return err
	}

	if t.CarfileBlockCount >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CarfileBlockCount)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CarfileBlockCount-1)); err != nil {
			return err
		}
	}

	// t.CarfileSize (int64) (int64)
	if len("CarfileSize") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CarfileSize\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CarfileSize"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CarfileSize")); err != nil {
		return err
	}

	if t.CarfileSize >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CarfileSize)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CarfileSize-1)); err != nil {
			return err
		}
	}

	// t.NodeID (string) (string)
	if len("NodeID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"NodeID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("NodeID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("NodeID")); err != nil {
		return err
	}

	if len(t.NodeID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.NodeID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.NodeID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.NodeID)); err != nil {
		return err
	}

	// t.IsCandidate (bool) (bool)
	if len("IsCandidate") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"IsCandidate\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("IsCandidate"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("IsCandidate")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.IsCandidate); err != nil {
		return err
	}
	return nil
}

func (t *CacheResultInfo) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CacheResultInfo{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("CacheResultInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Status (int64) (int64)
		case "Status":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Status = int64(extraI)
			}
			// t.CarfileBlockCount (int64) (int64)
		case "CarfileBlockCount":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CarfileBlockCount = int64(extraI)
			}
			// t.CarfileSize (int64) (int64)
		case "CarfileSize":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CarfileSize = int64(extraI)
			}
			// t.NodeID (string) (string)
		case "NodeID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.NodeID = string(sval)
			}
			// t.IsCandidate (bool) (bool)
		case "IsCandidate":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.IsCandidate = false
			case 21:
				t.IsCandidate = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *CompletedValue) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{160}); err != nil {
		return err
	}
	return nil
}

func (t *CompletedValue) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CompletedValue{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("CompletedValue: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
