// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package storage

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	types "github.com/linguohua/titan/api/types"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *CarfileInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{178}); err != nil {
		return err
	}

	// t.ID (string) (string)
	if len("ID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ID")); err != nil {
		return err
	}

	if len(t.ID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ID)); err != nil {
		return err
	}

	// t.State (storage.CarfileState) (string)
	if len("State") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"State\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("State"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("State")); err != nil {
		return err
	}

	if len(t.State) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.State was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.State))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.State)); err != nil {
		return err
	}

	// t.CarfileHash (storage.CarfileID) (string)
	if len("CarfileHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CarfileHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CarfileHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CarfileHash")); err != nil {
		return err
	}

	if len(t.CarfileHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CarfileHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CarfileHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CarfileHash)); err != nil {
		return err
	}

	// t.CarfileCID (string) (string)
	if len("CarfileCID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CarfileCID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CarfileCID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CarfileCID")); err != nil {
		return err
	}

	if len(t.CarfileCID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CarfileCID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CarfileCID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CarfileCID)); err != nil {
		return err
	}

	// t.Replicas (int64) (int64)
	if len("Replicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Replicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Replicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Replicas")); err != nil {
		return err
	}

	if t.Replicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Replicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Replicas-1)); err != nil {
			return err
		}
	}

	// t.ServerID (string) (string)
	if len("ServerID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ServerID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ServerID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ServerID")); err != nil {
		return err
	}

	if len(t.ServerID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ServerID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ServerID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ServerID)); err != nil {
		return err
	}

	// t.Size (int64) (int64)
	if len("Size") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Size\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Size"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Size")); err != nil {
		return err
	}

	if t.Size >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Size)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Size-1)); err != nil {
			return err
		}
	}

	// t.Blocks (int64) (int64)
	if len("Blocks") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Blocks\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Blocks"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Blocks")); err != nil {
		return err
	}

	if t.Blocks >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Blocks)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Blocks-1)); err != nil {
			return err
		}
	}

	// t.CreatedAt (int64) (int64)
	if len("CreatedAt") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CreatedAt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CreatedAt"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CreatedAt")); err != nil {
		return err
	}

	if t.CreatedAt >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CreatedAt)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CreatedAt-1)); err != nil {
			return err
		}
	}

	// t.Expiration (int64) (int64)
	if len("Expiration") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Expiration\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Expiration"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Expiration")); err != nil {
		return err
	}

	if t.Expiration >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Expiration)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Expiration-1)); err != nil {
			return err
		}
	}

	// t.CandidateReplicas (int64) (int64)
	if len("CandidateReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CandidateReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CandidateReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CandidateReplicas")); err != nil {
		return err
	}

	if t.CandidateReplicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CandidateReplicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CandidateReplicas-1)); err != nil {
			return err
		}
	}

	// t.Log ([]storage.Log) (slice)
	if len("Log") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Log\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Log"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Log")); err != nil {
		return err
	}

	if len(t.Log) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Log was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Log))); err != nil {
		return err
	}
	for _, v := range t.Log {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.CandidateStoreFails (int64) (int64)
	if len("CandidateStoreFails") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CandidateStoreFails\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CandidateStoreFails"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CandidateStoreFails")); err != nil {
		return err
	}

	if t.CandidateStoreFails >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CandidateStoreFails)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CandidateStoreFails-1)); err != nil {
			return err
		}
	}

	// t.EdgeStoreFails (int64) (int64)
	if len("EdgeStoreFails") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"EdgeStoreFails\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("EdgeStoreFails"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("EdgeStoreFails")); err != nil {
		return err
	}

	if t.EdgeStoreFails >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.EdgeStoreFails)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.EdgeStoreFails-1)); err != nil {
			return err
		}
	}

	// t.CompletedEdgeReplicas (map[string]*storage.CompletedValue) (map)
	if len("CompletedEdgeReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CompletedEdgeReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CompletedEdgeReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CompletedEdgeReplicas")); err != nil {
		return err
	}

	{
		if len(t.CompletedEdgeReplicas) > 4096 {
			return xerrors.Errorf("cannot marshal t.CompletedEdgeReplicas map too large")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajMap, uint64(len(t.CompletedEdgeReplicas))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.CompletedEdgeReplicas))
		for k := range t.CompletedEdgeReplicas {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for _, k := range keys {
			v := t.CompletedEdgeReplicas[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}

		}
	}

	// t.CompletedCandidateReplicas (map[string]*storage.CompletedValue) (map)
	if len("CompletedCandidateReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CompletedCandidateReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CompletedCandidateReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CompletedCandidateReplicas")); err != nil {
		return err
	}

	{
		if len(t.CompletedCandidateReplicas) > 4096 {
			return xerrors.Errorf("cannot marshal t.CompletedCandidateReplicas map too large")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajMap, uint64(len(t.CompletedCandidateReplicas))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.CompletedCandidateReplicas))
		for k := range t.CompletedCandidateReplicas {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for _, k := range keys {
			v := t.CompletedCandidateReplicas[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}

		}
	}

	// t.DownloadSources ([]*types.DownloadSource) (slice)
	if len("DownloadSources") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DownloadSources\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DownloadSources"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DownloadSources")); err != nil {
		return err
	}

	if len(t.DownloadSources) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.DownloadSources was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.DownloadSources))); err != nil {
		return err
	}
	for _, v := range t.DownloadSources {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.LastResultInfo (storage.NodeCacheResult) (struct)
	if len("LastResultInfo") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"LastResultInfo\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("LastResultInfo"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("LastResultInfo")); err != nil {
		return err
	}

	if err := t.LastResultInfo.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *CarfileInfo) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CarfileInfo{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("CarfileInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.ID (string) (string)
		case "ID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ID = string(sval)
			}
			// t.State (storage.CarfileState) (string)
		case "State":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.State = CarfileState(sval)
			}
			// t.CarfileHash (storage.CarfileID) (string)
		case "CarfileHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CarfileHash = CarfileID(sval)
			}
			// t.CarfileCID (string) (string)
		case "CarfileCID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CarfileCID = string(sval)
			}
			// t.Replicas (int64) (int64)
		case "Replicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Replicas = int64(extraI)
			}
			// t.ServerID (string) (string)
		case "ServerID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ServerID = string(sval)
			}
			// t.Size (int64) (int64)
		case "Size":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Size = int64(extraI)
			}
			// t.Blocks (int64) (int64)
		case "Blocks":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Blocks = int64(extraI)
			}
			// t.CreatedAt (int64) (int64)
		case "CreatedAt":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CreatedAt = int64(extraI)
			}
			// t.Expiration (int64) (int64)
		case "Expiration":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Expiration = int64(extraI)
			}
			// t.CandidateReplicas (int64) (int64)
		case "CandidateReplicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CandidateReplicas = int64(extraI)
			}
			// t.Log ([]storage.Log) (slice)
		case "Log":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Log: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Log = make([]Log, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v Log
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Log[i] = v
			}

			// t.CandidateStoreFails (int64) (int64)
		case "CandidateStoreFails":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CandidateStoreFails = int64(extraI)
			}
			// t.EdgeStoreFails (int64) (int64)
		case "EdgeStoreFails":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.EdgeStoreFails = int64(extraI)
			}
			// t.CompletedEdgeReplicas (map[string]*storage.CompletedValue) (map)
		case "CompletedEdgeReplicas":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajMap {
				return fmt.Errorf("expected a map (major type 5)")
			}
			if extra > 4096 {
				return fmt.Errorf("t.CompletedEdgeReplicas: map too large")
			}

			t.CompletedEdgeReplicas = make(map[string]*CompletedValue, extra)

			for i, l := 0, int(extra); i < l; i++ {

				var k string

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					k = string(sval)
				}

				var v *CompletedValue

				{

					b, err := cr.ReadByte()
					if err != nil {
						return err
					}
					if b != cbg.CborNull[0] {
						if err := cr.UnreadByte(); err != nil {
							return err
						}
						v = new(CompletedValue)
						if err := v.UnmarshalCBOR(cr); err != nil {
							return xerrors.Errorf("unmarshaling v pointer: %w", err)
						}
					}

				}

				t.CompletedEdgeReplicas[k] = v

			}
			// t.CompletedCandidateReplicas (map[string]*storage.CompletedValue) (map)
		case "CompletedCandidateReplicas":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajMap {
				return fmt.Errorf("expected a map (major type 5)")
			}
			if extra > 4096 {
				return fmt.Errorf("t.CompletedCandidateReplicas: map too large")
			}

			t.CompletedCandidateReplicas = make(map[string]*CompletedValue, extra)

			for i, l := 0, int(extra); i < l; i++ {

				var k string

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					k = string(sval)
				}

				var v *CompletedValue

				{

					b, err := cr.ReadByte()
					if err != nil {
						return err
					}
					if b != cbg.CborNull[0] {
						if err := cr.UnreadByte(); err != nil {
							return err
						}
						v = new(CompletedValue)
						if err := v.UnmarshalCBOR(cr); err != nil {
							return xerrors.Errorf("unmarshaling v pointer: %w", err)
						}
					}

				}

				t.CompletedCandidateReplicas[k] = v

			}
			// t.DownloadSources ([]*types.DownloadSource) (slice)
		case "DownloadSources":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.DownloadSources: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.DownloadSources = make([]*types.DownloadSource, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v types.DownloadSource
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.DownloadSources[i] = &v
			}

			// t.LastResultInfo (storage.NodeCacheResult) (struct)
		case "LastResultInfo":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.LastResultInfo = new(NodeCacheResult)
					if err := t.LastResultInfo.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.LastResultInfo pointer: %w", err)
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *Log) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.Timestamp (uint64) (uint64)
	if len("Timestamp") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Timestamp\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Timestamp"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Timestamp")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Timestamp)); err != nil {
		return err
	}

	// t.Trace (string) (string)
	if len("Trace") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Trace\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Trace"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Trace")); err != nil {
		return err
	}

	if len(t.Trace) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Trace was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Trace))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Trace)); err != nil {
		return err
	}

	// t.Message (string) (string)
	if len("Message") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Message\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Message"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Message")); err != nil {
		return err
	}

	if len(t.Message) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Message was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Message))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Message)); err != nil {
		return err
	}

	// t.Kind (string) (string)
	if len("Kind") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Kind\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Kind"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Kind")); err != nil {
		return err
	}

	if len(t.Kind) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Kind was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Kind))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Kind)); err != nil {
		return err
	}
	return nil
}

func (t *Log) UnmarshalCBOR(r io.Reader) (err error) {
	*t = Log{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Log: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Timestamp (uint64) (uint64)
		case "Timestamp":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Timestamp = uint64(extra)

			}
			// t.Trace (string) (string)
		case "Trace":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Trace = string(sval)
			}
			// t.Message (string) (string)
		case "Message":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Message = string(sval)
			}
			// t.Kind (string) (string)
		case "Kind":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Kind = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *NodeCacheResult) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{166}); err != nil {
		return err
	}

	// t.Status (int64) (int64)
	if len("Status") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Status\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Status"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Status")); err != nil {
		return err
	}

	if t.Status >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Status)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Status-1)); err != nil {
			return err
		}
	}

	// t.CarfileBlockCount (int64) (int64)
	if len("CarfileBlockCount") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CarfileBlockCount\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CarfileBlockCount"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CarfileBlockCount")); err != nil {
		return err
	}

	if t.CarfileBlockCount >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CarfileBlockCount)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CarfileBlockCount-1)); err != nil {
			return err
		}
	}

	// t.CarfileSize (int64) (int64)
	if len("CarfileSize") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CarfileSize\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CarfileSize"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CarfileSize")); err != nil {
		return err
	}

	if t.CarfileSize >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CarfileSize)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CarfileSize-1)); err != nil {
			return err
		}
	}

	// t.NodeID (string) (string)
	if len("NodeID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"NodeID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("NodeID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("NodeID")); err != nil {
		return err
	}

	if len(t.NodeID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.NodeID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.NodeID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.NodeID)); err != nil {
		return err
	}

	// t.IsCandidate (bool) (bool)
	if len("IsCandidate") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"IsCandidate\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("IsCandidate"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("IsCandidate")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.IsCandidate); err != nil {
		return err
	}

	// t.Source (types.DownloadSource) (struct)
	if len("Source") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Source\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Source"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Source")); err != nil {
		return err
	}

	if err := t.Source.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *NodeCacheResult) UnmarshalCBOR(r io.Reader) (err error) {
	*t = NodeCacheResult{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NodeCacheResult: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Status (int64) (int64)
		case "Status":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Status = int64(extraI)
			}
			// t.CarfileBlockCount (int64) (int64)
		case "CarfileBlockCount":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CarfileBlockCount = int64(extraI)
			}
			// t.CarfileSize (int64) (int64)
		case "CarfileSize":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CarfileSize = int64(extraI)
			}
			// t.NodeID (string) (string)
		case "NodeID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.NodeID = string(sval)
			}
			// t.IsCandidate (bool) (bool)
		case "IsCandidate":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.IsCandidate = false
			case 21:
				t.IsCandidate = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Source (types.DownloadSource) (struct)
		case "Source":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Source = new(types.DownloadSource)
					if err := t.Source.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Source pointer: %w", err)
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *CompletedValue) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{160}); err != nil {
		return err
	}
	return nil
}

func (t *CompletedValue) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CompletedValue{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("CompletedValue: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
