// Code generated by titan/gen/api. DO NOT EDIT.

package api

import (
	"context"
	"github.com/filecoin-project/go-jsonrpc/auth"
	"github.com/google/uuid"
	"github.com/linguohua/titan/journal/alerting"
	xerrors "golang.org/x/xerrors"

)


var ErrNotSupported = xerrors.New("method not supported")


type CandidateStruct struct {

	EdgeStruct

	Internal struct {

		SendBlock func(p0 context.Context, p1 []byte, p2 string) (error) `perm:"read"`

		VerifyData func(p0 context.Context, p1 []ReqVerify) (error) `perm:"read"`

	}
}

type CandidateStub struct {

	EdgeStub

}

type CommonStruct struct {

	Internal struct {

		AuthNew func(p0 context.Context, p1 []auth.Permission) ([]byte, error) `perm:"admin"`

		AuthVerify func(p0 context.Context, p1 string) ([]auth.Permission, error) `perm:"read"`

		Closing func(p0 context.Context) (<-chan struct{}, error) `perm:"read"`

		Discover func(p0 context.Context) (OpenRPCDocument, error) `perm:"read"`

		LogAlerts func(p0 context.Context) ([]alerting.Alert, error) `perm:"admin"`

		LogList func(p0 context.Context) ([]string, error) `perm:"write"`

		LogSetLevel func(p0 context.Context, p1 string, p2 string) (error) `perm:"write"`

		Session func(p0 context.Context, p1 string) (uuid.UUID, error) `perm:"read"`

		Shutdown func(p0 context.Context) (error) `perm:"admin"`

		Version func(p0 context.Context) (APIVersion, error) `perm:"read"`

	}
}

type CommonStub struct {

}

type DeviceStruct struct {

	Internal struct {

		DeviceInfo func(p0 context.Context) (DevicesInfo, error) `perm:"read"`

	}
}

type DeviceStub struct {

}

type EdgeStruct struct {

	CommonStruct

	DeviceStruct

	Internal struct {

		BlockStoreStat func(p0 context.Context) (error) `perm:"read"`

		CacheData func(p0 context.Context, p1 ReqCacheData) (error) `perm:"read"`

		DeleteBlocks func(p0 context.Context, p1 []string) (DelResult, error) `perm:"read"`

		DeleteData func(p0 context.Context, p1 []string) (DelResult, error) `perm:"read"`

		DoVerify func(p0 context.Context, p1 ReqVerify, p2 string) (error) `perm:"read"`

		LoadData func(p0 context.Context, p1 string) ([]byte, error) `perm:"read"`

		QueryCacheStat func(p0 context.Context) (CacheStat, error) `perm:"read"`

		QueryCachingBlocks func(p0 context.Context) (CachingBlockList, error) `perm:"read"`

		SetDownloadSpeed func(p0 context.Context, p1 int64) (error) `perm:"read"`

		UnlimitDownloadSpeed func(p0 context.Context) (error) `perm:"read"`

		WaitQuiet func(p0 context.Context) (error) `perm:"read"`

	}
}

type EdgeStub struct {

	CommonStub

	DeviceStub

}

type SchedulerStruct struct {

	CommonStruct

	Internal struct {

		CacheData func(p0 context.Context, p1 []string, p2 string) ([]string, error) `perm:"read"`

		CacheResult func(p0 context.Context, p1 string, p2 CacheResultInfo) (string, error) `perm:"read"`

		CandidateNodeConnect func(p0 context.Context, p1 string) (error) `perm:"read"`

		DeleteData func(p0 context.Context, p1 string, p2 []string) (map[string]string, error) `perm:"read"`

		DeleteDataRecord func(p0 context.Context, p1 string, p2 []string) (map[string]string, error) `perm:"read"`

		EdgeNodeConnect func(p0 context.Context, p1 string) (error) `perm:"read"`

		ElectionValidators func(p0 context.Context) (error) `perm:"read"`

		FindNodeWithData func(p0 context.Context, p1 string, p2 string) (string, error) `perm:"read"`

		GetCacheTag func(p0 context.Context, p1 string, p2 string) (string, error) `perm:"read"`

		GetDeviceDiagnosisDaily func(p0 context.Context, p1 IncomeDailySearch) (IncomeDailyRes, error) `perm:"read"`

		GetDeviceDiagnosisHour func(p0 context.Context, p1 IncomeDailySearch) (HourDailyRes, error) `perm:"read"`

		GetDevicesCount func(p0 context.Context, p1 DevicesSearch) (DeviceType, error) `perm:"read"`

		GetDevicesInfo func(p0 context.Context, p1 DevicesSearch) (DevicesInfoPage, error) `perm:"read"`

		GetDownloadURLWithData func(p0 context.Context, p1 string, p2 string) (string, error) `perm:"read"`

		GetIndexInfo func(p0 context.Context, p1 IndexRequest) (IndexPageRes, error) `perm:"read"`

		GetOnlineDeviceIDs func(p0 context.Context, p1 NodeTypeName) ([]string, error) `perm:"read"`

		InitNodeDeviceIDs func(p0 context.Context) (error) `perm:"read"`

		QueryCacheStatWithNode func(p0 context.Context, p1 string) ([]CacheStat, error) `perm:"read"`

		QueryCachingBlocksWithNode func(p0 context.Context, p1 string) (CachingBlockList, error) `perm:"read"`

		Retrieval func(p0 context.Context, p1 IndexPageSearch) (RetrievalPageRes, error) `perm:"read"`

		SaveDailyInfo func(p0 context.Context, p1 IncomeDaily) (error) `perm:"read"`

		SpotCheck func(p0 context.Context) (error) `perm:"read"`

		VerifyDataResult func(p0 context.Context, p1 VerifyResults) (error) `perm:"read"`

	}
}

type SchedulerStub struct {

	CommonStub

}





func (s *CandidateStruct) SendBlock(p0 context.Context, p1 []byte, p2 string) (error) {
	if s.Internal.SendBlock == nil {
		return ErrNotSupported
	}
	return s.Internal.SendBlock(p0, p1, p2)
}

func (s *CandidateStub) SendBlock(p0 context.Context, p1 []byte, p2 string) (error) {
	return ErrNotSupported
}

func (s *CandidateStruct) VerifyData(p0 context.Context, p1 []ReqVerify) (error) {
	if s.Internal.VerifyData == nil {
		return ErrNotSupported
	}
	return s.Internal.VerifyData(p0, p1)
}

func (s *CandidateStub) VerifyData(p0 context.Context, p1 []ReqVerify) (error) {
	return ErrNotSupported
}




func (s *CommonStruct) AuthNew(p0 context.Context, p1 []auth.Permission) ([]byte, error) {
	if s.Internal.AuthNew == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.AuthNew(p0, p1)
}

func (s *CommonStub) AuthNew(p0 context.Context, p1 []auth.Permission) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *CommonStruct) AuthVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	if s.Internal.AuthVerify == nil {
		return *new([]auth.Permission), ErrNotSupported
	}
	return s.Internal.AuthVerify(p0, p1)
}

func (s *CommonStub) AuthVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	return *new([]auth.Permission), ErrNotSupported
}

func (s *CommonStruct) Closing(p0 context.Context) (<-chan struct{}, error) {
	if s.Internal.Closing == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.Closing(p0)
}

func (s *CommonStub) Closing(p0 context.Context) (<-chan struct{}, error) {
	return nil, ErrNotSupported
}

func (s *CommonStruct) Discover(p0 context.Context) (OpenRPCDocument, error) {
	if s.Internal.Discover == nil {
		return *new(OpenRPCDocument), ErrNotSupported
	}
	return s.Internal.Discover(p0)
}

func (s *CommonStub) Discover(p0 context.Context) (OpenRPCDocument, error) {
	return *new(OpenRPCDocument), ErrNotSupported
}

func (s *CommonStruct) LogAlerts(p0 context.Context) ([]alerting.Alert, error) {
	if s.Internal.LogAlerts == nil {
		return *new([]alerting.Alert), ErrNotSupported
	}
	return s.Internal.LogAlerts(p0)
}

func (s *CommonStub) LogAlerts(p0 context.Context) ([]alerting.Alert, error) {
	return *new([]alerting.Alert), ErrNotSupported
}

func (s *CommonStruct) LogList(p0 context.Context) ([]string, error) {
	if s.Internal.LogList == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.LogList(p0)
}

func (s *CommonStub) LogList(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *CommonStruct) LogSetLevel(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.LogSetLevel == nil {
		return ErrNotSupported
	}
	return s.Internal.LogSetLevel(p0, p1, p2)
}

func (s *CommonStub) LogSetLevel(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *CommonStruct) Session(p0 context.Context, p1 string) (uuid.UUID, error) {
	if s.Internal.Session == nil {
		return *new(uuid.UUID), ErrNotSupported
	}
	return s.Internal.Session(p0, p1)
}

func (s *CommonStub) Session(p0 context.Context, p1 string) (uuid.UUID, error) {
	return *new(uuid.UUID), ErrNotSupported
}

func (s *CommonStruct) Shutdown(p0 context.Context) (error) {
	if s.Internal.Shutdown == nil {
		return ErrNotSupported
	}
	return s.Internal.Shutdown(p0)
}

func (s *CommonStub) Shutdown(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *CommonStruct) Version(p0 context.Context) (APIVersion, error) {
	if s.Internal.Version == nil {
		return *new(APIVersion), ErrNotSupported
	}
	return s.Internal.Version(p0)
}

func (s *CommonStub) Version(p0 context.Context) (APIVersion, error) {
	return *new(APIVersion), ErrNotSupported
}




func (s *DeviceStruct) DeviceInfo(p0 context.Context) (DevicesInfo, error) {
	if s.Internal.DeviceInfo == nil {
		return *new(DevicesInfo), ErrNotSupported
	}
	return s.Internal.DeviceInfo(p0)
}

func (s *DeviceStub) DeviceInfo(p0 context.Context) (DevicesInfo, error) {
	return *new(DevicesInfo), ErrNotSupported
}




func (s *EdgeStruct) BlockStoreStat(p0 context.Context) (error) {
	if s.Internal.BlockStoreStat == nil {
		return ErrNotSupported
	}
	return s.Internal.BlockStoreStat(p0)
}

func (s *EdgeStub) BlockStoreStat(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *EdgeStruct) CacheData(p0 context.Context, p1 ReqCacheData) (error) {
	if s.Internal.CacheData == nil {
		return ErrNotSupported
	}
	return s.Internal.CacheData(p0, p1)
}

func (s *EdgeStub) CacheData(p0 context.Context, p1 ReqCacheData) (error) {
	return ErrNotSupported
}

func (s *EdgeStruct) DeleteBlocks(p0 context.Context, p1 []string) (DelResult, error) {
	if s.Internal.DeleteBlocks == nil {
		return *new(DelResult), ErrNotSupported
	}
	return s.Internal.DeleteBlocks(p0, p1)
}

func (s *EdgeStub) DeleteBlocks(p0 context.Context, p1 []string) (DelResult, error) {
	return *new(DelResult), ErrNotSupported
}

func (s *EdgeStruct) DeleteData(p0 context.Context, p1 []string) (DelResult, error) {
	if s.Internal.DeleteData == nil {
		return *new(DelResult), ErrNotSupported
	}
	return s.Internal.DeleteData(p0, p1)
}

func (s *EdgeStub) DeleteData(p0 context.Context, p1 []string) (DelResult, error) {
	return *new(DelResult), ErrNotSupported
}

func (s *EdgeStruct) DoVerify(p0 context.Context, p1 ReqVerify, p2 string) (error) {
	if s.Internal.DoVerify == nil {
		return ErrNotSupported
	}
	return s.Internal.DoVerify(p0, p1, p2)
}

func (s *EdgeStub) DoVerify(p0 context.Context, p1 ReqVerify, p2 string) (error) {
	return ErrNotSupported
}

func (s *EdgeStruct) LoadData(p0 context.Context, p1 string) ([]byte, error) {
	if s.Internal.LoadData == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.LoadData(p0, p1)
}

func (s *EdgeStub) LoadData(p0 context.Context, p1 string) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *EdgeStruct) QueryCacheStat(p0 context.Context) (CacheStat, error) {
	if s.Internal.QueryCacheStat == nil {
		return *new(CacheStat), ErrNotSupported
	}
	return s.Internal.QueryCacheStat(p0)
}

func (s *EdgeStub) QueryCacheStat(p0 context.Context) (CacheStat, error) {
	return *new(CacheStat), ErrNotSupported
}

func (s *EdgeStruct) QueryCachingBlocks(p0 context.Context) (CachingBlockList, error) {
	if s.Internal.QueryCachingBlocks == nil {
		return *new(CachingBlockList), ErrNotSupported
	}
	return s.Internal.QueryCachingBlocks(p0)
}

func (s *EdgeStub) QueryCachingBlocks(p0 context.Context) (CachingBlockList, error) {
	return *new(CachingBlockList), ErrNotSupported
}

func (s *EdgeStruct) SetDownloadSpeed(p0 context.Context, p1 int64) (error) {
	if s.Internal.SetDownloadSpeed == nil {
		return ErrNotSupported
	}
	return s.Internal.SetDownloadSpeed(p0, p1)
}

func (s *EdgeStub) SetDownloadSpeed(p0 context.Context, p1 int64) (error) {
	return ErrNotSupported
}

func (s *EdgeStruct) UnlimitDownloadSpeed(p0 context.Context) (error) {
	if s.Internal.UnlimitDownloadSpeed == nil {
		return ErrNotSupported
	}
	return s.Internal.UnlimitDownloadSpeed(p0)
}

func (s *EdgeStub) UnlimitDownloadSpeed(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *EdgeStruct) WaitQuiet(p0 context.Context) (error) {
	if s.Internal.WaitQuiet == nil {
		return ErrNotSupported
	}
	return s.Internal.WaitQuiet(p0)
}

func (s *EdgeStub) WaitQuiet(p0 context.Context) (error) {
	return ErrNotSupported
}




func (s *SchedulerStruct) CacheData(p0 context.Context, p1 []string, p2 string) ([]string, error) {
	if s.Internal.CacheData == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.CacheData(p0, p1, p2)
}

func (s *SchedulerStub) CacheData(p0 context.Context, p1 []string, p2 string) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *SchedulerStruct) CacheResult(p0 context.Context, p1 string, p2 CacheResultInfo) (string, error) {
	if s.Internal.CacheResult == nil {
		return "", ErrNotSupported
	}
	return s.Internal.CacheResult(p0, p1, p2)
}

func (s *SchedulerStub) CacheResult(p0 context.Context, p1 string, p2 CacheResultInfo) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) CandidateNodeConnect(p0 context.Context, p1 string) (error) {
	if s.Internal.CandidateNodeConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.CandidateNodeConnect(p0, p1)
}

func (s *SchedulerStub) CandidateNodeConnect(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) DeleteData(p0 context.Context, p1 string, p2 []string) (map[string]string, error) {
	if s.Internal.DeleteData == nil {
		return *new(map[string]string), ErrNotSupported
	}
	return s.Internal.DeleteData(p0, p1, p2)
}

func (s *SchedulerStub) DeleteData(p0 context.Context, p1 string, p2 []string) (map[string]string, error) {
	return *new(map[string]string), ErrNotSupported
}

func (s *SchedulerStruct) DeleteDataRecord(p0 context.Context, p1 string, p2 []string) (map[string]string, error) {
	if s.Internal.DeleteDataRecord == nil {
		return *new(map[string]string), ErrNotSupported
	}
	return s.Internal.DeleteDataRecord(p0, p1, p2)
}

func (s *SchedulerStub) DeleteDataRecord(p0 context.Context, p1 string, p2 []string) (map[string]string, error) {
	return *new(map[string]string), ErrNotSupported
}

func (s *SchedulerStruct) EdgeNodeConnect(p0 context.Context, p1 string) (error) {
	if s.Internal.EdgeNodeConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.EdgeNodeConnect(p0, p1)
}

func (s *SchedulerStub) EdgeNodeConnect(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) ElectionValidators(p0 context.Context) (error) {
	if s.Internal.ElectionValidators == nil {
		return ErrNotSupported
	}
	return s.Internal.ElectionValidators(p0)
}

func (s *SchedulerStub) ElectionValidators(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) FindNodeWithData(p0 context.Context, p1 string, p2 string) (string, error) {
	if s.Internal.FindNodeWithData == nil {
		return "", ErrNotSupported
	}
	return s.Internal.FindNodeWithData(p0, p1, p2)
}

func (s *SchedulerStub) FindNodeWithData(p0 context.Context, p1 string, p2 string) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) GetCacheTag(p0 context.Context, p1 string, p2 string) (string, error) {
	if s.Internal.GetCacheTag == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetCacheTag(p0, p1, p2)
}

func (s *SchedulerStub) GetCacheTag(p0 context.Context, p1 string, p2 string) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) GetDeviceDiagnosisDaily(p0 context.Context, p1 IncomeDailySearch) (IncomeDailyRes, error) {
	if s.Internal.GetDeviceDiagnosisDaily == nil {
		return *new(IncomeDailyRes), ErrNotSupported
	}
	return s.Internal.GetDeviceDiagnosisDaily(p0, p1)
}

func (s *SchedulerStub) GetDeviceDiagnosisDaily(p0 context.Context, p1 IncomeDailySearch) (IncomeDailyRes, error) {
	return *new(IncomeDailyRes), ErrNotSupported
}

func (s *SchedulerStruct) GetDeviceDiagnosisHour(p0 context.Context, p1 IncomeDailySearch) (HourDailyRes, error) {
	if s.Internal.GetDeviceDiagnosisHour == nil {
		return *new(HourDailyRes), ErrNotSupported
	}
	return s.Internal.GetDeviceDiagnosisHour(p0, p1)
}

func (s *SchedulerStub) GetDeviceDiagnosisHour(p0 context.Context, p1 IncomeDailySearch) (HourDailyRes, error) {
	return *new(HourDailyRes), ErrNotSupported
}

func (s *SchedulerStruct) GetDevicesCount(p0 context.Context, p1 DevicesSearch) (DeviceType, error) {
	if s.Internal.GetDevicesCount == nil {
		return *new(DeviceType), ErrNotSupported
	}
	return s.Internal.GetDevicesCount(p0, p1)
}

func (s *SchedulerStub) GetDevicesCount(p0 context.Context, p1 DevicesSearch) (DeviceType, error) {
	return *new(DeviceType), ErrNotSupported
}

func (s *SchedulerStruct) GetDevicesInfo(p0 context.Context, p1 DevicesSearch) (DevicesInfoPage, error) {
	if s.Internal.GetDevicesInfo == nil {
		return *new(DevicesInfoPage), ErrNotSupported
	}
	return s.Internal.GetDevicesInfo(p0, p1)
}

func (s *SchedulerStub) GetDevicesInfo(p0 context.Context, p1 DevicesSearch) (DevicesInfoPage, error) {
	return *new(DevicesInfoPage), ErrNotSupported
}

func (s *SchedulerStruct) GetDownloadURLWithData(p0 context.Context, p1 string, p2 string) (string, error) {
	if s.Internal.GetDownloadURLWithData == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetDownloadURLWithData(p0, p1, p2)
}

func (s *SchedulerStub) GetDownloadURLWithData(p0 context.Context, p1 string, p2 string) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) GetIndexInfo(p0 context.Context, p1 IndexRequest) (IndexPageRes, error) {
	if s.Internal.GetIndexInfo == nil {
		return *new(IndexPageRes), ErrNotSupported
	}
	return s.Internal.GetIndexInfo(p0, p1)
}

func (s *SchedulerStub) GetIndexInfo(p0 context.Context, p1 IndexRequest) (IndexPageRes, error) {
	return *new(IndexPageRes), ErrNotSupported
}

func (s *SchedulerStruct) GetOnlineDeviceIDs(p0 context.Context, p1 NodeTypeName) ([]string, error) {
	if s.Internal.GetOnlineDeviceIDs == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetOnlineDeviceIDs(p0, p1)
}

func (s *SchedulerStub) GetOnlineDeviceIDs(p0 context.Context, p1 NodeTypeName) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *SchedulerStruct) InitNodeDeviceIDs(p0 context.Context) (error) {
	if s.Internal.InitNodeDeviceIDs == nil {
		return ErrNotSupported
	}
	return s.Internal.InitNodeDeviceIDs(p0)
}

func (s *SchedulerStub) InitNodeDeviceIDs(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) QueryCacheStatWithNode(p0 context.Context, p1 string) ([]CacheStat, error) {
	if s.Internal.QueryCacheStatWithNode == nil {
		return *new([]CacheStat), ErrNotSupported
	}
	return s.Internal.QueryCacheStatWithNode(p0, p1)
}

func (s *SchedulerStub) QueryCacheStatWithNode(p0 context.Context, p1 string) ([]CacheStat, error) {
	return *new([]CacheStat), ErrNotSupported
}

func (s *SchedulerStruct) QueryCachingBlocksWithNode(p0 context.Context, p1 string) (CachingBlockList, error) {
	if s.Internal.QueryCachingBlocksWithNode == nil {
		return *new(CachingBlockList), ErrNotSupported
	}
	return s.Internal.QueryCachingBlocksWithNode(p0, p1)
}

func (s *SchedulerStub) QueryCachingBlocksWithNode(p0 context.Context, p1 string) (CachingBlockList, error) {
	return *new(CachingBlockList), ErrNotSupported
}

func (s *SchedulerStruct) Retrieval(p0 context.Context, p1 IndexPageSearch) (RetrievalPageRes, error) {
	if s.Internal.Retrieval == nil {
		return *new(RetrievalPageRes), ErrNotSupported
	}
	return s.Internal.Retrieval(p0, p1)
}

func (s *SchedulerStub) Retrieval(p0 context.Context, p1 IndexPageSearch) (RetrievalPageRes, error) {
	return *new(RetrievalPageRes), ErrNotSupported
}

func (s *SchedulerStruct) SaveDailyInfo(p0 context.Context, p1 IncomeDaily) (error) {
	if s.Internal.SaveDailyInfo == nil {
		return ErrNotSupported
	}
	return s.Internal.SaveDailyInfo(p0, p1)
}

func (s *SchedulerStub) SaveDailyInfo(p0 context.Context, p1 IncomeDaily) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) SpotCheck(p0 context.Context) (error) {
	if s.Internal.SpotCheck == nil {
		return ErrNotSupported
	}
	return s.Internal.SpotCheck(p0)
}

func (s *SchedulerStub) SpotCheck(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) VerifyDataResult(p0 context.Context, p1 VerifyResults) (error) {
	if s.Internal.VerifyDataResult == nil {
		return ErrNotSupported
	}
	return s.Internal.VerifyDataResult(p0, p1)
}

func (s *SchedulerStub) VerifyDataResult(p0 context.Context, p1 VerifyResults) (error) {
	return ErrNotSupported
}



var _ Candidate = new(CandidateStruct)
var _ Common = new(CommonStruct)
var _ Device = new(DeviceStruct)
var _ Edge = new(EdgeStruct)
var _ Scheduler = new(SchedulerStruct)


