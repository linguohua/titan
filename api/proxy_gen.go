// Code generated by titan/gen/api. DO NOT EDIT.

package api

import (
	"context"
	"time"

	"github.com/filecoin-project/go-jsonrpc/auth"
	"github.com/google/uuid"
	"github.com/linguohua/titan/journal/alerting"
	xerrors "golang.org/x/xerrors"
)

var ErrNotSupported = xerrors.New("method not supported")

type CandidateStruct struct {
	CommonStruct

	DeviceStruct

	DownloadStruct

	ValidateStruct

	DataSyncStruct

	CarfileOperationStruct

	Internal struct {
		GetBlocksOfCarfile func(p0 context.Context, p1 string, p2 int64, p3 int) (map[int]string, error) `perm:"read"`

		LoadBlock func(p0 context.Context, p1 string) ([]byte, error) `perm:"read"`

		ValidateNodes func(p0 context.Context, p1 []ReqValidate) error `perm:"read"`

		WaitQuiet func(p0 context.Context) error `perm:"read"`
	}
}

type CandidateStub struct {
	CommonStub

	DeviceStub

	DownloadStub

	ValidateStub

	DataSyncStub

	CarfileOperationStub
}

type CarfileOperationStruct struct {
	Internal struct {
		CacheCarfile func(p0 context.Context, p1 string, p2 []*DownloadSource) (*CacheCarfileResult, error) `perm:"write"`

		DeleteAllCarfiles func(p0 context.Context) error `perm:"admin"`

		DeleteCarfile func(p0 context.Context, p1 string) error `perm:"write"`

		QueryCacheStat func(p0 context.Context) (*CacheStat, error) `perm:"write"`

		QueryCachingCarfile func(p0 context.Context) (*CachingCarfile, error) `perm:"write"`
	}
}

type CarfileOperationStub struct {
}

type CommonStruct struct {
	Internal struct {
		AuthNew func(p0 context.Context, p1 []auth.Permission) ([]byte, error) `perm:"admin"`

		AuthVerify func(p0 context.Context, p1 string) ([]auth.Permission, error) `perm:"read"`

		Closing func(p0 context.Context) (<-chan struct{}, error) `perm:"read"`

		DeleteLogFile func(p0 context.Context) error `perm:"write"`

		Discover func(p0 context.Context) (OpenRPCDocument, error) `perm:"read"`

		DownloadLogFile func(p0 context.Context) ([]byte, error) `perm:"write"`

		LogAlerts func(p0 context.Context) ([]alerting.Alert, error) `perm:"admin"`

		LogList func(p0 context.Context) ([]string, error) `perm:"write"`

		LogSetLevel func(p0 context.Context, p1 string, p2 string) error `perm:"write"`

		Session func(p0 context.Context) (uuid.UUID, error) `perm:"read"`

		ShowLogFile func(p0 context.Context) (*LogFile, error) `perm:"write"`

		Shutdown func(p0 context.Context) error `perm:"admin"`

		Version func(p0 context.Context) (APIVersion, error) `perm:"read"`
	}
}

type CommonStub struct {
}

type DataSyncStruct struct {
	Internal struct {
		BeginCheckCarfiles func(p0 context.Context) error `perm:"write"`

		CompareChecksum func(p0 context.Context, p1 string, p2 string) (*CompareResult, error) `perm:"write"`

		DoCheckCarfiles func(p0 context.Context, p1 string, p2 bool) error `perm:"write"`

		PrepareCarfiles func(p0 context.Context, p1 []string) error `perm:"write"`
	}
}

type DataSyncStub struct {
}

type DeviceStruct struct {
	Internal struct {
		NodeID func(p0 context.Context) (string, error) `perm:"read"`

		NodeInfo func(p0 context.Context) (NodeInfo, error) `perm:"read"`
	}
}

type DeviceStub struct {
}

type DownloadStruct struct {
	Internal struct {
		SetDownloadSpeed func(p0 context.Context, p1 int64) error `perm:"write"`
	}
}

type DownloadStub struct {
}

type EdgeStruct struct {
	CommonStruct

	DeviceStruct

	DownloadStruct

	ValidateStruct

	DataSyncStruct

	CarfileOperationStruct

	Internal struct {
		GetMyExternalAddr func(p0 context.Context, p1 string) (string, error) `perm:"write"`

		PingUser func(p0 context.Context, p1 string) error `perm:"write"`

		WaitQuiet func(p0 context.Context) error `perm:"read"`
	}
}

type EdgeStub struct {
	CommonStub

	DeviceStub

	DownloadStub

	ValidateStub

	DataSyncStub

	CarfileOperationStub
}

type LocatorStruct struct {
	CommonStruct

	Internal struct {
		AddAccessPoint func(p0 context.Context, p1 string, p2 string, p3 int, p4 string) error `perm:"admin"`

		AllocateNodes func(p0 context.Context, p1 string, p2 NodeType, p3 int) ([]NodeAllocateInfo, error) `perm:"admin"`

		GetAccessPoints func(p0 context.Context, p1 string) ([]string, error) `perm:"read"`

		GetDownloadInfosWithCarfile func(p0 context.Context, p1 string) ([]*DownloadInfoResult, error) `perm:"read"`

		ListAreaIDs func(p0 context.Context) ([]string, error) `perm:"admin"`

		LoadAccessPointsForWeb func(p0 context.Context) ([]AccessPoint, error) `perm:"admin"`

		LoadUserAccessPoint func(p0 context.Context, p1 string) (AccessPoint, error) `perm:"admin"`

		RemoveAccessPoints func(p0 context.Context, p1 string) error `perm:"admin"`

		SetNodeOnlineStatus func(p0 context.Context, p1 string, p2 bool) error `perm:"write"`

		ShowAccessPoint func(p0 context.Context, p1 string) (AccessPoint, error) `perm:"admin"`

		UserDownloadBlockResults func(p0 context.Context, p1 []UserBlockDownloadResult) error `perm:"read"`
	}
}

type LocatorStub struct {
	CommonStub
}

type SchedulerStruct struct {
	CommonStruct

	Internal struct {
		AllocateNodes func(p0 context.Context, p1 NodeType, p2 int) ([]NodeAllocateInfo, error) `perm:"admin"`

		AuthNodeNew func(p0 context.Context, p1 []auth.Permission, p2 string, p3 string) ([]byte, error) `perm:"read"`

		AuthNodeVerify func(p0 context.Context, p1 string) ([]auth.Permission, error) `perm:"read"`

		CacheCarfile func(p0 context.Context, p1 *CacheCarfileInfo) error `perm:"admin"`

		CacheResult func(p0 context.Context, p1 CacheResult) error `perm:"write"`

		CandidateNodeConnect func(p0 context.Context) error `perm:"write"`

		DeleteNodeAppUpdateInfos func(p0 context.Context, p1 int) error `perm:"admin"`

		DeleteNodeLogFile func(p0 context.Context, p1 string) error `perm:"admin"`

		EdgeExternalAddr func(p0 context.Context, p1 string, p2 string) (string, error) `perm:"write"`

		EdgeNodeConnect func(p0 context.Context) error `perm:"write"`

		ElectionValidators func(p0 context.Context) error `perm:"admin"`

		ExecuteUndoneCarfilesTask func(p0 context.Context, p1 []string) error `perm:"admin"`

		GetCarfileRecordInfo func(p0 context.Context, p1 string) (CarfileRecordInfo, error) `perm:"read"`

		GetDownloadInfosWithCarfile func(p0 context.Context, p1 string) ([]*DownloadInfoResult, error) `perm:"read"`

		GetDownloadingCarfileRecords func(p0 context.Context) ([]*CarfileRecordInfo, error) `perm:"read"`

		GetNodeAppUpdateInfos func(p0 context.Context) (map[int]*NodeAppUpdateInfo, error) `perm:"read"`

		GetReplicaInfos func(p0 context.Context, p1 ListCacheInfosReq) (ListCacheInfosRsp, error) `perm:"read"`

		GetSummaryValidateMessage func(p0 context.Context, p1 time.Time, p2 time.Time, p3 int, p4 int) (*SummeryValidateResult, error) `perm:"read"`

		GetSystemInfo func(p0 context.Context) (SystemBaseInfo, error) `perm:"read"`

		IsBehindFullConeNAT func(p0 context.Context, p1 string) (bool, error) `perm:"read"`

		ListBlockDownloadInfo func(p0 context.Context, p1 ListBlockDownloadInfoReq) (ListBlockDownloadInfoRsp, error) `perm:"read"`

		ListCarfileRecords func(p0 context.Context, p1 int) (*CarfileRecordsInfo, error) `perm:"read"`

		LocatorConnect func(p0 context.Context, p1 string, p2 string) error `perm:"write"`

		NodeDownloadRecord func(p0 context.Context, p1 string) ([]*DownloadRecordInfo, error) `perm:"read"`

		NodeExternalAddr func(p0 context.Context) (string, error) `perm:"read"`

		NodeInfo func(p0 context.Context, p1 string) (NodeInfo, error) `perm:"read"`

		NodeList func(p0 context.Context, p1 int, p2 int) (ListNodesRsp, error) `perm:"read"`

		NodeLogFile func(p0 context.Context, p1 string) ([]byte, error) `perm:"admin"`

		NodeLogFileInfo func(p0 context.Context, p1 string) (*LogFile, error) `perm:"admin"`

		NodeNatType func(p0 context.Context, p1 string) (NatType, error) `perm:"write"`

		NodePublicKey func(p0 context.Context) (string, error) `perm:"write"`

		NodeQuit func(p0 context.Context, p1 string, p2 string) error `perm:"admin"`

		NodeValidatedResult func(p0 context.Context, p1 ValidatedResult) error `perm:"write"`

		OnlineNodeList func(p0 context.Context, p1 NodeType) ([]string, error) `perm:"read"`

		RemoveCache func(p0 context.Context, p1 string, p2 string) error `perm:"admin"`

		RemoveCarfile func(p0 context.Context, p1 string) error `perm:"admin"`

		RemoveCarfileResult func(p0 context.Context, p1 RemoveCarfileResult) error `perm:"write"`

		ResetCacheExpirationTime func(p0 context.Context, p1 string, p2 time.Time) error `perm:"admin"`

		ResetReplicaCacheCount func(p0 context.Context, p1 int) error `perm:"admin"`

		SetNodeAppUpdateInfo func(p0 context.Context, p1 *NodeAppUpdateInfo) error `perm:"admin"`

		SetNodePort func(p0 context.Context, p1 string, p2 string) error `perm:"admin"`

		UserDownloadBlockResults func(p0 context.Context, p1 []UserBlockDownloadResult) error `perm:"read"`

		UserDownloadResult func(p0 context.Context, p1 UserDownloadResult) error `perm:"write"`

		ValidateRunningState func(p0 context.Context) (bool, error) `perm:"admin"`

		ValidateStart func(p0 context.Context) error `perm:"admin"`

		ValidateSwitch func(p0 context.Context, p1 bool) error `perm:"admin"`
	}
}

type SchedulerStub struct {
	CommonStub
}

type ValidateStruct struct {
	Internal struct {
		BeValidate func(p0 context.Context, p1 ReqValidate, p2 string) error `perm:"read"`
	}
}

type ValidateStub struct {
}

func (s *CandidateStruct) GetBlocksOfCarfile(p0 context.Context, p1 string, p2 int64, p3 int) (map[int]string, error) {
	if s.Internal.GetBlocksOfCarfile == nil {
		return *new(map[int]string), ErrNotSupported
	}
	return s.Internal.GetBlocksOfCarfile(p0, p1, p2, p3)
}

func (s *CandidateStub) GetBlocksOfCarfile(p0 context.Context, p1 string, p2 int64, p3 int) (map[int]string, error) {
	return *new(map[int]string), ErrNotSupported
}

func (s *CandidateStruct) LoadBlock(p0 context.Context, p1 string) ([]byte, error) {
	if s.Internal.LoadBlock == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.LoadBlock(p0, p1)
}

func (s *CandidateStub) LoadBlock(p0 context.Context, p1 string) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *CandidateStruct) ValidateNodes(p0 context.Context, p1 []ReqValidate) error {
	if s.Internal.ValidateNodes == nil {
		return ErrNotSupported
	}
	return s.Internal.ValidateNodes(p0, p1)
}

func (s *CandidateStub) ValidateNodes(p0 context.Context, p1 []ReqValidate) error {
	return ErrNotSupported
}

func (s *CandidateStruct) WaitQuiet(p0 context.Context) error {
	if s.Internal.WaitQuiet == nil {
		return ErrNotSupported
	}
	return s.Internal.WaitQuiet(p0)
}

func (s *CandidateStub) WaitQuiet(p0 context.Context) error {
	return ErrNotSupported
}

func (s *CarfileOperationStruct) CacheCarfile(p0 context.Context, p1 string, p2 []*DownloadSource) (*CacheCarfileResult, error) {
	if s.Internal.CacheCarfile == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.CacheCarfile(p0, p1, p2)
}

func (s *CarfileOperationStub) CacheCarfile(p0 context.Context, p1 string, p2 []*DownloadSource) (*CacheCarfileResult, error) {
	return nil, ErrNotSupported
}

func (s *CarfileOperationStruct) DeleteAllCarfiles(p0 context.Context) error {
	if s.Internal.DeleteAllCarfiles == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteAllCarfiles(p0)
}

func (s *CarfileOperationStub) DeleteAllCarfiles(p0 context.Context) error {
	return ErrNotSupported
}

func (s *CarfileOperationStruct) DeleteCarfile(p0 context.Context, p1 string) error {
	if s.Internal.DeleteCarfile == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteCarfile(p0, p1)
}

func (s *CarfileOperationStub) DeleteCarfile(p0 context.Context, p1 string) error {
	return ErrNotSupported
}

func (s *CarfileOperationStruct) QueryCacheStat(p0 context.Context) (*CacheStat, error) {
	if s.Internal.QueryCacheStat == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.QueryCacheStat(p0)
}

func (s *CarfileOperationStub) QueryCacheStat(p0 context.Context) (*CacheStat, error) {
	return nil, ErrNotSupported
}

func (s *CarfileOperationStruct) QueryCachingCarfile(p0 context.Context) (*CachingCarfile, error) {
	if s.Internal.QueryCachingCarfile == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.QueryCachingCarfile(p0)
}

func (s *CarfileOperationStub) QueryCachingCarfile(p0 context.Context) (*CachingCarfile, error) {
	return nil, ErrNotSupported
}

func (s *CommonStruct) AuthNew(p0 context.Context, p1 []auth.Permission) ([]byte, error) {
	if s.Internal.AuthNew == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.AuthNew(p0, p1)
}

func (s *CommonStub) AuthNew(p0 context.Context, p1 []auth.Permission) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *CommonStruct) AuthVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	if s.Internal.AuthVerify == nil {
		return *new([]auth.Permission), ErrNotSupported
	}
	return s.Internal.AuthVerify(p0, p1)
}

func (s *CommonStub) AuthVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	return *new([]auth.Permission), ErrNotSupported
}

func (s *CommonStruct) Closing(p0 context.Context) (<-chan struct{}, error) {
	if s.Internal.Closing == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.Closing(p0)
}

func (s *CommonStub) Closing(p0 context.Context) (<-chan struct{}, error) {
	return nil, ErrNotSupported
}

func (s *CommonStruct) DeleteLogFile(p0 context.Context) error {
	if s.Internal.DeleteLogFile == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteLogFile(p0)
}

func (s *CommonStub) DeleteLogFile(p0 context.Context) error {
	return ErrNotSupported
}

func (s *CommonStruct) Discover(p0 context.Context) (OpenRPCDocument, error) {
	if s.Internal.Discover == nil {
		return *new(OpenRPCDocument), ErrNotSupported
	}
	return s.Internal.Discover(p0)
}

func (s *CommonStub) Discover(p0 context.Context) (OpenRPCDocument, error) {
	return *new(OpenRPCDocument), ErrNotSupported
}

func (s *CommonStruct) DownloadLogFile(p0 context.Context) ([]byte, error) {
	if s.Internal.DownloadLogFile == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.DownloadLogFile(p0)
}

func (s *CommonStub) DownloadLogFile(p0 context.Context) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *CommonStruct) LogAlerts(p0 context.Context) ([]alerting.Alert, error) {
	if s.Internal.LogAlerts == nil {
		return *new([]alerting.Alert), ErrNotSupported
	}
	return s.Internal.LogAlerts(p0)
}

func (s *CommonStub) LogAlerts(p0 context.Context) ([]alerting.Alert, error) {
	return *new([]alerting.Alert), ErrNotSupported
}

func (s *CommonStruct) LogList(p0 context.Context) ([]string, error) {
	if s.Internal.LogList == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.LogList(p0)
}

func (s *CommonStub) LogList(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *CommonStruct) LogSetLevel(p0 context.Context, p1 string, p2 string) error {
	if s.Internal.LogSetLevel == nil {
		return ErrNotSupported
	}
	return s.Internal.LogSetLevel(p0, p1, p2)
}

func (s *CommonStub) LogSetLevel(p0 context.Context, p1 string, p2 string) error {
	return ErrNotSupported
}

func (s *CommonStruct) Session(p0 context.Context) (uuid.UUID, error) {
	if s.Internal.Session == nil {
		return *new(uuid.UUID), ErrNotSupported
	}
	return s.Internal.Session(p0)
}

func (s *CommonStub) Session(p0 context.Context) (uuid.UUID, error) {
	return *new(uuid.UUID), ErrNotSupported
}

func (s *CommonStruct) ShowLogFile(p0 context.Context) (*LogFile, error) {
	if s.Internal.ShowLogFile == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ShowLogFile(p0)
}

func (s *CommonStub) ShowLogFile(p0 context.Context) (*LogFile, error) {
	return nil, ErrNotSupported
}

func (s *CommonStruct) Shutdown(p0 context.Context) error {
	if s.Internal.Shutdown == nil {
		return ErrNotSupported
	}
	return s.Internal.Shutdown(p0)
}

func (s *CommonStub) Shutdown(p0 context.Context) error {
	return ErrNotSupported
}

func (s *CommonStruct) Version(p0 context.Context) (APIVersion, error) {
	if s.Internal.Version == nil {
		return *new(APIVersion), ErrNotSupported
	}
	return s.Internal.Version(p0)
}

func (s *CommonStub) Version(p0 context.Context) (APIVersion, error) {
	return *new(APIVersion), ErrNotSupported
}

func (s *DataSyncStruct) BeginCheckCarfiles(p0 context.Context) error {
	if s.Internal.BeginCheckCarfiles == nil {
		return ErrNotSupported
	}
	return s.Internal.BeginCheckCarfiles(p0)
}

func (s *DataSyncStub) BeginCheckCarfiles(p0 context.Context) error {
	return ErrNotSupported
}

func (s *DataSyncStruct) CompareChecksum(p0 context.Context, p1 string, p2 string) (*CompareResult, error) {
	if s.Internal.CompareChecksum == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.CompareChecksum(p0, p1, p2)
}

func (s *DataSyncStub) CompareChecksum(p0 context.Context, p1 string, p2 string) (*CompareResult, error) {
	return nil, ErrNotSupported
}

func (s *DataSyncStruct) DoCheckCarfiles(p0 context.Context, p1 string, p2 bool) error {
	if s.Internal.DoCheckCarfiles == nil {
		return ErrNotSupported
	}
	return s.Internal.DoCheckCarfiles(p0, p1, p2)
}

func (s *DataSyncStub) DoCheckCarfiles(p0 context.Context, p1 string, p2 bool) error {
	return ErrNotSupported
}

func (s *DataSyncStruct) PrepareCarfiles(p0 context.Context, p1 []string) error {
	if s.Internal.PrepareCarfiles == nil {
		return ErrNotSupported
	}
	return s.Internal.PrepareCarfiles(p0, p1)
}

func (s *DataSyncStub) PrepareCarfiles(p0 context.Context, p1 []string) error {
	return ErrNotSupported
}

func (s *DeviceStruct) NodeID(p0 context.Context) (string, error) {
	if s.Internal.NodeID == nil {
		return "", ErrNotSupported
	}
	return s.Internal.NodeID(p0)
}

func (s *DeviceStub) NodeID(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *DeviceStruct) NodeInfo(p0 context.Context) (NodeInfo, error) {
	if s.Internal.NodeInfo == nil {
		return *new(NodeInfo), ErrNotSupported
	}
	return s.Internal.NodeInfo(p0)
}

func (s *DeviceStub) NodeInfo(p0 context.Context) (NodeInfo, error) {
	return *new(NodeInfo), ErrNotSupported
}

func (s *DownloadStruct) SetDownloadSpeed(p0 context.Context, p1 int64) error {
	if s.Internal.SetDownloadSpeed == nil {
		return ErrNotSupported
	}
	return s.Internal.SetDownloadSpeed(p0, p1)
}

func (s *DownloadStub) SetDownloadSpeed(p0 context.Context, p1 int64) error {
	return ErrNotSupported
}

func (s *EdgeStruct) GetMyExternalAddr(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetMyExternalAddr == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetMyExternalAddr(p0, p1)
}

func (s *EdgeStub) GetMyExternalAddr(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *EdgeStruct) PingUser(p0 context.Context, p1 string) error {
	if s.Internal.PingUser == nil {
		return ErrNotSupported
	}
	return s.Internal.PingUser(p0, p1)
}

func (s *EdgeStub) PingUser(p0 context.Context, p1 string) error {
	return ErrNotSupported
}

func (s *EdgeStruct) WaitQuiet(p0 context.Context) error {
	if s.Internal.WaitQuiet == nil {
		return ErrNotSupported
	}
	return s.Internal.WaitQuiet(p0)
}

func (s *EdgeStub) WaitQuiet(p0 context.Context) error {
	return ErrNotSupported
}

func (s *LocatorStruct) AddAccessPoint(p0 context.Context, p1 string, p2 string, p3 int, p4 string) error {
	if s.Internal.AddAccessPoint == nil {
		return ErrNotSupported
	}
	return s.Internal.AddAccessPoint(p0, p1, p2, p3, p4)
}

func (s *LocatorStub) AddAccessPoint(p0 context.Context, p1 string, p2 string, p3 int, p4 string) error {
	return ErrNotSupported
}

func (s *LocatorStruct) AllocateNodes(p0 context.Context, p1 string, p2 NodeType, p3 int) ([]NodeAllocateInfo, error) {
	if s.Internal.AllocateNodes == nil {
		return *new([]NodeAllocateInfo), ErrNotSupported
	}
	return s.Internal.AllocateNodes(p0, p1, p2, p3)
}

func (s *LocatorStub) AllocateNodes(p0 context.Context, p1 string, p2 NodeType, p3 int) ([]NodeAllocateInfo, error) {
	return *new([]NodeAllocateInfo), ErrNotSupported
}

func (s *LocatorStruct) GetAccessPoints(p0 context.Context, p1 string) ([]string, error) {
	if s.Internal.GetAccessPoints == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetAccessPoints(p0, p1)
}

func (s *LocatorStub) GetAccessPoints(p0 context.Context, p1 string) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *LocatorStruct) GetDownloadInfosWithCarfile(p0 context.Context, p1 string) ([]*DownloadInfoResult, error) {
	if s.Internal.GetDownloadInfosWithCarfile == nil {
		return *new([]*DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetDownloadInfosWithCarfile(p0, p1)
}

func (s *LocatorStub) GetDownloadInfosWithCarfile(p0 context.Context, p1 string) ([]*DownloadInfoResult, error) {
	return *new([]*DownloadInfoResult), ErrNotSupported
}

func (s *LocatorStruct) ListAreaIDs(p0 context.Context) ([]string, error) {
	if s.Internal.ListAreaIDs == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.ListAreaIDs(p0)
}

func (s *LocatorStub) ListAreaIDs(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *LocatorStruct) LoadAccessPointsForWeb(p0 context.Context) ([]AccessPoint, error) {
	if s.Internal.LoadAccessPointsForWeb == nil {
		return *new([]AccessPoint), ErrNotSupported
	}
	return s.Internal.LoadAccessPointsForWeb(p0)
}

func (s *LocatorStub) LoadAccessPointsForWeb(p0 context.Context) ([]AccessPoint, error) {
	return *new([]AccessPoint), ErrNotSupported
}

func (s *LocatorStruct) LoadUserAccessPoint(p0 context.Context, p1 string) (AccessPoint, error) {
	if s.Internal.LoadUserAccessPoint == nil {
		return *new(AccessPoint), ErrNotSupported
	}
	return s.Internal.LoadUserAccessPoint(p0, p1)
}

func (s *LocatorStub) LoadUserAccessPoint(p0 context.Context, p1 string) (AccessPoint, error) {
	return *new(AccessPoint), ErrNotSupported
}

func (s *LocatorStruct) RemoveAccessPoints(p0 context.Context, p1 string) error {
	if s.Internal.RemoveAccessPoints == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveAccessPoints(p0, p1)
}

func (s *LocatorStub) RemoveAccessPoints(p0 context.Context, p1 string) error {
	return ErrNotSupported
}

func (s *LocatorStruct) SetNodeOnlineStatus(p0 context.Context, p1 string, p2 bool) error {
	if s.Internal.SetNodeOnlineStatus == nil {
		return ErrNotSupported
	}
	return s.Internal.SetNodeOnlineStatus(p0, p1, p2)
}

func (s *LocatorStub) SetNodeOnlineStatus(p0 context.Context, p1 string, p2 bool) error {
	return ErrNotSupported
}

func (s *LocatorStruct) ShowAccessPoint(p0 context.Context, p1 string) (AccessPoint, error) {
	if s.Internal.ShowAccessPoint == nil {
		return *new(AccessPoint), ErrNotSupported
	}
	return s.Internal.ShowAccessPoint(p0, p1)
}

func (s *LocatorStub) ShowAccessPoint(p0 context.Context, p1 string) (AccessPoint, error) {
	return *new(AccessPoint), ErrNotSupported
}

func (s *LocatorStruct) UserDownloadBlockResults(p0 context.Context, p1 []UserBlockDownloadResult) error {
	if s.Internal.UserDownloadBlockResults == nil {
		return ErrNotSupported
	}
	return s.Internal.UserDownloadBlockResults(p0, p1)
}

func (s *LocatorStub) UserDownloadBlockResults(p0 context.Context, p1 []UserBlockDownloadResult) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) AllocateNodes(p0 context.Context, p1 NodeType, p2 int) ([]NodeAllocateInfo, error) {
	if s.Internal.AllocateNodes == nil {
		return *new([]NodeAllocateInfo), ErrNotSupported
	}
	return s.Internal.AllocateNodes(p0, p1, p2)
}

func (s *SchedulerStub) AllocateNodes(p0 context.Context, p1 NodeType, p2 int) ([]NodeAllocateInfo, error) {
	return *new([]NodeAllocateInfo), ErrNotSupported
}

func (s *SchedulerStruct) AuthNodeNew(p0 context.Context, p1 []auth.Permission, p2 string, p3 string) ([]byte, error) {
	if s.Internal.AuthNodeNew == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.AuthNodeNew(p0, p1, p2, p3)
}

func (s *SchedulerStub) AuthNodeNew(p0 context.Context, p1 []auth.Permission, p2 string, p3 string) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *SchedulerStruct) AuthNodeVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	if s.Internal.AuthNodeVerify == nil {
		return *new([]auth.Permission), ErrNotSupported
	}
	return s.Internal.AuthNodeVerify(p0, p1)
}

func (s *SchedulerStub) AuthNodeVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	return *new([]auth.Permission), ErrNotSupported
}

func (s *SchedulerStruct) CacheCarfile(p0 context.Context, p1 *CacheCarfileInfo) error {
	if s.Internal.CacheCarfile == nil {
		return ErrNotSupported
	}
	return s.Internal.CacheCarfile(p0, p1)
}

func (s *SchedulerStub) CacheCarfile(p0 context.Context, p1 *CacheCarfileInfo) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) CacheResult(p0 context.Context, p1 CacheResult) error {
	if s.Internal.CacheResult == nil {
		return ErrNotSupported
	}
	return s.Internal.CacheResult(p0, p1)
}

func (s *SchedulerStub) CacheResult(p0 context.Context, p1 CacheResult) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) CandidateNodeConnect(p0 context.Context) error {
	if s.Internal.CandidateNodeConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.CandidateNodeConnect(p0)
}

func (s *SchedulerStub) CandidateNodeConnect(p0 context.Context) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) DeleteNodeAppUpdateInfos(p0 context.Context, p1 int) error {
	if s.Internal.DeleteNodeAppUpdateInfos == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteNodeAppUpdateInfos(p0, p1)
}

func (s *SchedulerStub) DeleteNodeAppUpdateInfos(p0 context.Context, p1 int) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) DeleteNodeLogFile(p0 context.Context, p1 string) error {
	if s.Internal.DeleteNodeLogFile == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteNodeLogFile(p0, p1)
}

func (s *SchedulerStub) DeleteNodeLogFile(p0 context.Context, p1 string) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) EdgeExternalAddr(p0 context.Context, p1 string, p2 string) (string, error) {
	if s.Internal.EdgeExternalAddr == nil {
		return "", ErrNotSupported
	}
	return s.Internal.EdgeExternalAddr(p0, p1, p2)
}

func (s *SchedulerStub) EdgeExternalAddr(p0 context.Context, p1 string, p2 string) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) EdgeNodeConnect(p0 context.Context) error {
	if s.Internal.EdgeNodeConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.EdgeNodeConnect(p0)
}

func (s *SchedulerStub) EdgeNodeConnect(p0 context.Context) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) ElectionValidators(p0 context.Context) error {
	if s.Internal.ElectionValidators == nil {
		return ErrNotSupported
	}
	return s.Internal.ElectionValidators(p0)
}

func (s *SchedulerStub) ElectionValidators(p0 context.Context) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) ExecuteUndoneCarfilesTask(p0 context.Context, p1 []string) error {
	if s.Internal.ExecuteUndoneCarfilesTask == nil {
		return ErrNotSupported
	}
	return s.Internal.ExecuteUndoneCarfilesTask(p0, p1)
}

func (s *SchedulerStub) ExecuteUndoneCarfilesTask(p0 context.Context, p1 []string) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) GetCarfileRecordInfo(p0 context.Context, p1 string) (CarfileRecordInfo, error) {
	if s.Internal.GetCarfileRecordInfo == nil {
		return *new(CarfileRecordInfo), ErrNotSupported
	}
	return s.Internal.GetCarfileRecordInfo(p0, p1)
}

func (s *SchedulerStub) GetCarfileRecordInfo(p0 context.Context, p1 string) (CarfileRecordInfo, error) {
	return *new(CarfileRecordInfo), ErrNotSupported
}

func (s *SchedulerStruct) GetDownloadInfosWithCarfile(p0 context.Context, p1 string) ([]*DownloadInfoResult, error) {
	if s.Internal.GetDownloadInfosWithCarfile == nil {
		return *new([]*DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetDownloadInfosWithCarfile(p0, p1)
}

func (s *SchedulerStub) GetDownloadInfosWithCarfile(p0 context.Context, p1 string) ([]*DownloadInfoResult, error) {
	return *new([]*DownloadInfoResult), ErrNotSupported
}

func (s *SchedulerStruct) GetDownloadingCarfileRecords(p0 context.Context) ([]*CarfileRecordInfo, error) {
	if s.Internal.GetDownloadingCarfileRecords == nil {
		return *new([]*CarfileRecordInfo), ErrNotSupported
	}
	return s.Internal.GetDownloadingCarfileRecords(p0)
}

func (s *SchedulerStub) GetDownloadingCarfileRecords(p0 context.Context) ([]*CarfileRecordInfo, error) {
	return *new([]*CarfileRecordInfo), ErrNotSupported
}

func (s *SchedulerStruct) GetNodeAppUpdateInfos(p0 context.Context) (map[int]*NodeAppUpdateInfo, error) {
	if s.Internal.GetNodeAppUpdateInfos == nil {
		return *new(map[int]*NodeAppUpdateInfo), ErrNotSupported
	}
	return s.Internal.GetNodeAppUpdateInfos(p0)
}

func (s *SchedulerStub) GetNodeAppUpdateInfos(p0 context.Context) (map[int]*NodeAppUpdateInfo, error) {
	return *new(map[int]*NodeAppUpdateInfo), ErrNotSupported
}

func (s *SchedulerStruct) GetReplicaInfos(p0 context.Context, p1 ListCacheInfosReq) (ListCacheInfosRsp, error) {
	if s.Internal.GetReplicaInfos == nil {
		return *new(ListCacheInfosRsp), ErrNotSupported
	}
	return s.Internal.GetReplicaInfos(p0, p1)
}

func (s *SchedulerStub) GetReplicaInfos(p0 context.Context, p1 ListCacheInfosReq) (ListCacheInfosRsp, error) {
	return *new(ListCacheInfosRsp), ErrNotSupported
}

func (s *SchedulerStruct) GetSummaryValidateMessage(p0 context.Context, p1 time.Time, p2 time.Time, p3 int, p4 int) (*SummeryValidateResult, error) {
	if s.Internal.GetSummaryValidateMessage == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetSummaryValidateMessage(p0, p1, p2, p3, p4)
}

func (s *SchedulerStub) GetSummaryValidateMessage(p0 context.Context, p1 time.Time, p2 time.Time, p3 int, p4 int) (*SummeryValidateResult, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) GetSystemInfo(p0 context.Context) (SystemBaseInfo, error) {
	if s.Internal.GetSystemInfo == nil {
		return *new(SystemBaseInfo), ErrNotSupported
	}
	return s.Internal.GetSystemInfo(p0)
}

func (s *SchedulerStub) GetSystemInfo(p0 context.Context) (SystemBaseInfo, error) {
	return *new(SystemBaseInfo), ErrNotSupported
}

func (s *SchedulerStruct) IsBehindFullConeNAT(p0 context.Context, p1 string) (bool, error) {
	if s.Internal.IsBehindFullConeNAT == nil {
		return false, ErrNotSupported
	}
	return s.Internal.IsBehindFullConeNAT(p0, p1)
}

func (s *SchedulerStub) IsBehindFullConeNAT(p0 context.Context, p1 string) (bool, error) {
	return false, ErrNotSupported
}

func (s *SchedulerStruct) ListBlockDownloadInfo(p0 context.Context, p1 ListBlockDownloadInfoReq) (ListBlockDownloadInfoRsp, error) {
	if s.Internal.ListBlockDownloadInfo == nil {
		return *new(ListBlockDownloadInfoRsp), ErrNotSupported
	}
	return s.Internal.ListBlockDownloadInfo(p0, p1)
}

func (s *SchedulerStub) ListBlockDownloadInfo(p0 context.Context, p1 ListBlockDownloadInfoReq) (ListBlockDownloadInfoRsp, error) {
	return *new(ListBlockDownloadInfoRsp), ErrNotSupported
}

func (s *SchedulerStruct) ListCarfileRecords(p0 context.Context, p1 int) (*CarfileRecordsInfo, error) {
	if s.Internal.ListCarfileRecords == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ListCarfileRecords(p0, p1)
}

func (s *SchedulerStub) ListCarfileRecords(p0 context.Context, p1 int) (*CarfileRecordsInfo, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) LocatorConnect(p0 context.Context, p1 string, p2 string) error {
	if s.Internal.LocatorConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.LocatorConnect(p0, p1, p2)
}

func (s *SchedulerStub) LocatorConnect(p0 context.Context, p1 string, p2 string) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) NodeDownloadRecord(p0 context.Context, p1 string) ([]*DownloadRecordInfo, error) {
	if s.Internal.NodeDownloadRecord == nil {
		return *new([]*DownloadRecordInfo), ErrNotSupported
	}
	return s.Internal.NodeDownloadRecord(p0, p1)
}

func (s *SchedulerStub) NodeDownloadRecord(p0 context.Context, p1 string) ([]*DownloadRecordInfo, error) {
	return *new([]*DownloadRecordInfo), ErrNotSupported
}

func (s *SchedulerStruct) NodeExternalAddr(p0 context.Context) (string, error) {
	if s.Internal.NodeExternalAddr == nil {
		return "", ErrNotSupported
	}
	return s.Internal.NodeExternalAddr(p0)
}

func (s *SchedulerStub) NodeExternalAddr(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) NodeInfo(p0 context.Context, p1 string) (NodeInfo, error) {
	if s.Internal.NodeInfo == nil {
		return *new(NodeInfo), ErrNotSupported
	}
	return s.Internal.NodeInfo(p0, p1)
}

func (s *SchedulerStub) NodeInfo(p0 context.Context, p1 string) (NodeInfo, error) {
	return *new(NodeInfo), ErrNotSupported
}

func (s *SchedulerStruct) NodeList(p0 context.Context, p1 int, p2 int) (ListNodesRsp, error) {
	if s.Internal.NodeList == nil {
		return *new(ListNodesRsp), ErrNotSupported
	}
	return s.Internal.NodeList(p0, p1, p2)
}

func (s *SchedulerStub) NodeList(p0 context.Context, p1 int, p2 int) (ListNodesRsp, error) {
	return *new(ListNodesRsp), ErrNotSupported
}

func (s *SchedulerStruct) NodeLogFile(p0 context.Context, p1 string) ([]byte, error) {
	if s.Internal.NodeLogFile == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.NodeLogFile(p0, p1)
}

func (s *SchedulerStub) NodeLogFile(p0 context.Context, p1 string) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *SchedulerStruct) NodeLogFileInfo(p0 context.Context, p1 string) (*LogFile, error) {
	if s.Internal.NodeLogFileInfo == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.NodeLogFileInfo(p0, p1)
}

func (s *SchedulerStub) NodeLogFileInfo(p0 context.Context, p1 string) (*LogFile, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) NodeNatType(p0 context.Context, p1 string) (NatType, error) {
	if s.Internal.NodeNatType == nil {
		return *new(NatType), ErrNotSupported
	}
	return s.Internal.NodeNatType(p0, p1)
}

func (s *SchedulerStub) NodeNatType(p0 context.Context, p1 string) (NatType, error) {
	return *new(NatType), ErrNotSupported
}

func (s *SchedulerStruct) NodePublicKey(p0 context.Context) (string, error) {
	if s.Internal.NodePublicKey == nil {
		return "", ErrNotSupported
	}
	return s.Internal.NodePublicKey(p0)
}

func (s *SchedulerStub) NodePublicKey(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) NodeQuit(p0 context.Context, p1 string, p2 string) error {
	if s.Internal.NodeQuit == nil {
		return ErrNotSupported
	}
	return s.Internal.NodeQuit(p0, p1, p2)
}

func (s *SchedulerStub) NodeQuit(p0 context.Context, p1 string, p2 string) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) NodeValidatedResult(p0 context.Context, p1 ValidatedResult) error {
	if s.Internal.NodeValidatedResult == nil {
		return ErrNotSupported
	}
	return s.Internal.NodeValidatedResult(p0, p1)
}

func (s *SchedulerStub) NodeValidatedResult(p0 context.Context, p1 ValidatedResult) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) OnlineNodeList(p0 context.Context, p1 NodeType) ([]string, error) {
	if s.Internal.OnlineNodeList == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.OnlineNodeList(p0, p1)
}

func (s *SchedulerStub) OnlineNodeList(p0 context.Context, p1 NodeType) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *SchedulerStruct) RemoveCache(p0 context.Context, p1 string, p2 string) error {
	if s.Internal.RemoveCache == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveCache(p0, p1, p2)
}

func (s *SchedulerStub) RemoveCache(p0 context.Context, p1 string, p2 string) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) RemoveCarfile(p0 context.Context, p1 string) error {
	if s.Internal.RemoveCarfile == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveCarfile(p0, p1)
}

func (s *SchedulerStub) RemoveCarfile(p0 context.Context, p1 string) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) RemoveCarfileResult(p0 context.Context, p1 RemoveCarfileResult) error {
	if s.Internal.RemoveCarfileResult == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveCarfileResult(p0, p1)
}

func (s *SchedulerStub) RemoveCarfileResult(p0 context.Context, p1 RemoveCarfileResult) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) ResetCacheExpirationTime(p0 context.Context, p1 string, p2 time.Time) error {
	if s.Internal.ResetCacheExpirationTime == nil {
		return ErrNotSupported
	}
	return s.Internal.ResetCacheExpirationTime(p0, p1, p2)
}

func (s *SchedulerStub) ResetCacheExpirationTime(p0 context.Context, p1 string, p2 time.Time) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) ResetReplicaCacheCount(p0 context.Context, p1 int) error {
	if s.Internal.ResetReplicaCacheCount == nil {
		return ErrNotSupported
	}
	return s.Internal.ResetReplicaCacheCount(p0, p1)
}

func (s *SchedulerStub) ResetReplicaCacheCount(p0 context.Context, p1 int) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) SetNodeAppUpdateInfo(p0 context.Context, p1 *NodeAppUpdateInfo) error {
	if s.Internal.SetNodeAppUpdateInfo == nil {
		return ErrNotSupported
	}
	return s.Internal.SetNodeAppUpdateInfo(p0, p1)
}

func (s *SchedulerStub) SetNodeAppUpdateInfo(p0 context.Context, p1 *NodeAppUpdateInfo) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) SetNodePort(p0 context.Context, p1 string, p2 string) error {
	if s.Internal.SetNodePort == nil {
		return ErrNotSupported
	}
	return s.Internal.SetNodePort(p0, p1, p2)
}

func (s *SchedulerStub) SetNodePort(p0 context.Context, p1 string, p2 string) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) UserDownloadBlockResults(p0 context.Context, p1 []UserBlockDownloadResult) error {
	if s.Internal.UserDownloadBlockResults == nil {
		return ErrNotSupported
	}
	return s.Internal.UserDownloadBlockResults(p0, p1)
}

func (s *SchedulerStub) UserDownloadBlockResults(p0 context.Context, p1 []UserBlockDownloadResult) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) UserDownloadResult(p0 context.Context, p1 UserDownloadResult) error {
	if s.Internal.UserDownloadResult == nil {
		return ErrNotSupported
	}
	return s.Internal.UserDownloadResult(p0, p1)
}

func (s *SchedulerStub) UserDownloadResult(p0 context.Context, p1 UserDownloadResult) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) ValidateRunningState(p0 context.Context) (bool, error) {
	if s.Internal.ValidateRunningState == nil {
		return false, ErrNotSupported
	}
	return s.Internal.ValidateRunningState(p0)
}

func (s *SchedulerStub) ValidateRunningState(p0 context.Context) (bool, error) {
	return false, ErrNotSupported
}

func (s *SchedulerStruct) ValidateStart(p0 context.Context) error {
	if s.Internal.ValidateStart == nil {
		return ErrNotSupported
	}
	return s.Internal.ValidateStart(p0)
}

func (s *SchedulerStub) ValidateStart(p0 context.Context) error {
	return ErrNotSupported
}

func (s *SchedulerStruct) ValidateSwitch(p0 context.Context, p1 bool) error {
	if s.Internal.ValidateSwitch == nil {
		return ErrNotSupported
	}
	return s.Internal.ValidateSwitch(p0, p1)
}

func (s *SchedulerStub) ValidateSwitch(p0 context.Context, p1 bool) error {
	return ErrNotSupported
}

func (s *ValidateStruct) BeValidate(p0 context.Context, p1 ReqValidate, p2 string) error {
	if s.Internal.BeValidate == nil {
		return ErrNotSupported
	}
	return s.Internal.BeValidate(p0, p1, p2)
}

func (s *ValidateStub) BeValidate(p0 context.Context, p1 ReqValidate, p2 string) error {
	return ErrNotSupported
}

var _ Candidate = new(CandidateStruct)
var _ CarfileOperation = new(CarfileOperationStruct)
var _ Common = new(CommonStruct)
var _ DataSync = new(DataSyncStruct)
var _ Device = new(DeviceStruct)
var _ Download = new(DownloadStruct)
var _ Edge = new(EdgeStruct)
var _ Locator = new(LocatorStruct)
var _ Scheduler = new(SchedulerStruct)
var _ Validate = new(ValidateStruct)
