// Code generated by titan/gen/api. DO NOT EDIT.

package api

import (
	"context"
	"github.com/filecoin-project/go-jsonrpc/auth"
	"github.com/google/uuid"
	"github.com/linguohua/titan/journal/alerting"
	xerrors "golang.org/x/xerrors"

)


var ErrNotSupported = xerrors.New("method not supported")


type BlockStruct struct {

	Internal struct {

		AnnounceBlocksWasDelete func(p0 context.Context, p1 []string) ([]BlockOperationResult, error) `perm:"write"`

		BlockStoreStat func(p0 context.Context) (error) `perm:"read"`

		CacheBlocks func(p0 context.Context, p1 []ReqCacheData) (CacheStat, error) `perm:"write"`

		DeleteAllBlocks func(p0 context.Context) (error) `perm:"admin"`

		DeleteBlocks func(p0 context.Context, p1 []string) ([]BlockOperationResult, error) `perm:"write"`

		GetCID func(p0 context.Context, p1 string) (string, error) `perm:"read"`

		GetFID func(p0 context.Context, p1 string) (string, error) `perm:"read"`

		LoadBlock func(p0 context.Context, p1 string) ([]byte, error) `perm:"read"`

		QueryCacheStat func(p0 context.Context) (CacheStat, error) `perm:"read"`

		QueryCachingBlocks func(p0 context.Context) (CachingBlockList, error) `perm:"read"`

	}
}

type BlockStub struct {

}

type CandidateStruct struct {

	CommonStruct

	DeviceStruct

	BlockStruct

	DownloadStruct

	ValidateStruct

	DataSyncStruct

	Internal struct {

		ValidateBlocks func(p0 context.Context, p1 []ReqValidate) (error) `perm:"read"`

		WaitQuiet func(p0 context.Context) (error) `perm:"read"`

	}
}

type CandidateStub struct {

	CommonStub

	DeviceStub

	BlockStub

	DownloadStub

	ValidateStub

	DataSyncStub

}

type CommonStruct struct {

	Internal struct {

		AuthNew func(p0 context.Context, p1 []auth.Permission) ([]byte, error) `perm:"admin"`

		AuthNodeNew func(p0 context.Context, p1 []auth.Permission, p2 string) ([]byte, error) `perm:"admin"`

		AuthNodeVerify func(p0 context.Context, p1 string) ([]auth.Permission, error) `perm:"read"`

		AuthVerify func(p0 context.Context, p1 string) ([]auth.Permission, error) `perm:"read"`

		Closing func(p0 context.Context) (<-chan struct{}, error) `perm:"read"`

		Discover func(p0 context.Context) (OpenRPCDocument, error) `perm:"read"`

		LogAlerts func(p0 context.Context) ([]alerting.Alert, error) `perm:"admin"`

		LogList func(p0 context.Context) ([]string, error) `perm:"write"`

		LogSetLevel func(p0 context.Context, p1 string, p2 string) (error) `perm:"write"`

		Session func(p0 context.Context, p1 string) (uuid.UUID, error) `perm:"read"`

		Shutdown func(p0 context.Context) (error) `perm:"admin"`

		Version func(p0 context.Context) (APIVersion, error) `perm:"read"`

	}
}

type CommonStub struct {

}

type DataSyncStruct struct {

	Internal struct {

		GetAllChecksums func(p0 context.Context, p1 int) (ChecksumRsp, error) `perm:"write"`

		GetChecksumsInRange func(p0 context.Context, p1 ReqChecksumInRange) (ChecksumRsp, error) `perm:"write"`

		ScrubBlocks func(p0 context.Context, p1 ScrubBlocks) (error) `perm:"write"`

	}
}

type DataSyncStub struct {

}

type DeviceStruct struct {

	Internal struct {

		DeviceInfo func(p0 context.Context) (DevicesInfo, error) `perm:"read"`

	}
}

type DeviceStub struct {

}

type DownloadStruct struct {

	Internal struct {

		SetDownloadSpeed func(p0 context.Context, p1 int64) (error) `perm:"write"`

	}
}

type DownloadStub struct {

}

type EdgeStruct struct {

	CommonStruct

	DeviceStruct

	BlockStruct

	DownloadStruct

	ValidateStruct

	DataSyncStruct

	Internal struct {

		WaitQuiet func(p0 context.Context) (error) `perm:"read"`

	}
}

type EdgeStub struct {

	CommonStub

	DeviceStub

	BlockStub

	DownloadStub

	ValidateStub

	DataSyncStub

}

type LocatorStruct struct {

	CommonStruct

	Internal struct {

		AddAccessPoints func(p0 context.Context, p1 string, p2 string, p3 int, p4 string) (error) `perm:"admin"`

		DeviceOffline func(p0 context.Context, p1 string) (error) `perm:"write"`

		DeviceOnline func(p0 context.Context, p1 string, p2 string, p3 int) (error) `perm:"write"`

		GetAccessPoints func(p0 context.Context, p1 string, p2 string) ([]SchedulerAuth, error) `perm:"read"`

		GetDownloadInfoWithBlock func(p0 context.Context, p1 string, p2 string) (DownloadInfoResult, error) `perm:"read"`

		GetDownloadInfoWithBlocks func(p0 context.Context, p1 []string, p2 string) (map[string]DownloadInfoResult, error) `perm:"read"`

		GetDownloadInfosWithBlocks func(p0 context.Context, p1 []string, p2 string) (map[string][]DownloadInfoResult, error) `perm:"read"`

		ListAccessPoints func(p0 context.Context) ([]string, error) `perm:"admin"`

		RemoveAccessPoints func(p0 context.Context, p1 string) (error) `perm:"admin"`

		ShowAccessPoint func(p0 context.Context, p1 string) (AccessPoint, error) `perm:"admin"`

	}
}

type LocatorStub struct {

	CommonStub

}

type SchedulerStruct struct {

	CommonStruct

	WebStruct

	Internal struct {

		CacheCarfile func(p0 context.Context, p1 string, p2 int, p3 int) (error) `perm:"admin"`

		CacheContinue func(p0 context.Context, p1 string, p2 string) (error) `perm:"admin"`

		CacheResult func(p0 context.Context, p1 string, p2 CacheResultInfo) (string, error) `perm:"write"`

		CandidateNodeConnect func(p0 context.Context, p1 string, p2 string) (error) `perm:"write"`

		DeleteBlockRecords func(p0 context.Context, p1 string, p2 []string) (map[string]string, error) `perm:"admin"`

		EdgeNodeConnect func(p0 context.Context, p1 string, p2 string) (error) `perm:"write"`

		ElectionValidators func(p0 context.Context) (error) `perm:"admin"`

		GetCandidateDownloadInfoWithBlocks func(p0 context.Context, p1 []string) (map[string]DownloadInfoResult, error) `perm:"write"`

		GetDevicesInfo func(p0 context.Context, p1 string) (DevicesInfo, error) `perm:"read"`

		GetDownloadInfo func(p0 context.Context, p1 string) ([]*BlockDownloadInfo, error) `perm:"read"`

		GetDownloadInfoWithBlock func(p0 context.Context, p1 string, p2 string) (DownloadInfoResult, error) `perm:"read"`

		GetDownloadInfoWithBlocks func(p0 context.Context, p1 []string, p2 string) (map[string]DownloadInfoResult, error) `perm:"read"`

		GetDownloadInfosWithBlocks func(p0 context.Context, p1 []string, p2 string) (map[string][]DownloadInfoResult, error) `perm:"read"`

		GetExternalIP func(p0 context.Context) (string, error) `perm:"write"`

		GetOnlineDeviceIDs func(p0 context.Context, p1 NodeTypeName) ([]string, error) `perm:"read"`

		GetPublicKey func(p0 context.Context) (string, error) `perm:"write"`

		GetValidationInfo func(p0 context.Context) (ValidationInfo, error) `perm:"admin"`

		ListDatas func(p0 context.Context, p1 int) (DataListInfo, error) `perm:"read"`

		ListEvents func(p0 context.Context, p1 int) (EventListInfo, error) `perm:"read"`

		LocatorConnect func(p0 context.Context, p1 int, p2 string, p3 string, p4 string) (error) `perm:"write"`

		NodeDownloadBlockResult func(p0 context.Context, p1 NodeBlockDownloadResult) (error) `perm:"write"`

		QueryCacheStatWithNode func(p0 context.Context, p1 string) ([]CacheStat, error) `perm:"read"`

		QueryCachingBlocksWithNode func(p0 context.Context, p1 string) (CachingBlockList, error) `perm:"read"`

		RegisterNode func(p0 context.Context, p1 NodeType) (NodeRegisterInfo, error) `perm:"read"`

		RemoveCache func(p0 context.Context, p1 string, p2 string) (error) `perm:"admin"`

		RemoveCarfile func(p0 context.Context, p1 string) (error) `perm:"admin"`

		ShowDataTask func(p0 context.Context, p1 string) (CacheDataInfo, error) `perm:"read"`

		ShowDataTasks func(p0 context.Context) ([]CacheDataInfo, error) `perm:"read"`

		StateNetwork func(p0 context.Context) (StateNetwork, error) `perm:"read"`

		UserDownloadBlockResults func(p0 context.Context, p1 []UserBlockDownloadResult) (error) `perm:"read"`

		Validate func(p0 context.Context) (error) `perm:"admin"`

		ValidateBlockResult func(p0 context.Context, p1 ValidateResults) (error) `perm:"write"`

		ValidateSwitch func(p0 context.Context, p1 bool) (error) `perm:"admin"`

	}
}

type SchedulerStub struct {

	CommonStub

	WebStub

}

type ValidateStruct struct {

	Internal struct {

		BeValidate func(p0 context.Context, p1 ReqValidate, p2 string) (error) `perm:"read"`

	}
}

type ValidateStub struct {

}

type WebStruct struct {

	Internal struct {

		AddCacheTask func(p0 context.Context, p1 string, p2 int, p3 int) (error) `perm:"read"`

		CancelCacheTask func(p0 context.Context, p1 string) (error) `perm:"read"`

		GetCacheTaskInfo func(p0 context.Context, p1 string) (CacheDataInfo, error) `perm:"read"`

		GetCarfileByCID func(p0 context.Context, p1 string) (WebCarfile, error) `perm:"read"`

		GetNodeInfoByID func(p0 context.Context, p1 string) (DevicesInfo, error) `perm:"read"`

		GetValidationInfo func(p0 context.Context) (ValidationInfo, error) `perm:"read"`

		ListBlockDownloadInfo func(p0 context.Context, p1 ListBlockDownloadInfoReq) (ListBlockDownloadInfoRsp, error) `perm:"read"`

		ListCacheTasks func(p0 context.Context, p1 int, p2 int) (ListCacheTasksRsp, error) `perm:"read"`

		ListCaches func(p0 context.Context, p1 ListCachesReq) (ListCachesRsp, error) `perm:"read"`

		ListNodeConnectionLog func(p0 context.Context, p1 ListNodeConnectionLogReq) (ListNodeConnectionLogRsp, error) `perm:"read"`

		ListNodes func(p0 context.Context, p1 int, p2 int) (ListNodesRsp, error) `perm:"read"`

		ListValidateResult func(p0 context.Context, p1 int, p2 int) (ListValidateResultRsp, error) `perm:"read"`

		RemoveCarfile func(p0 context.Context, p1 string) (error) `perm:"read"`

		SetupValidation func(p0 context.Context, p1 bool) (error) `perm:"read"`

		StatCaches func(p0 context.Context) (StatCachesRsp, error) `perm:"read"`

	}
}

type WebStub struct {

}





func (s *BlockStruct) AnnounceBlocksWasDelete(p0 context.Context, p1 []string) ([]BlockOperationResult, error) {
	if s.Internal.AnnounceBlocksWasDelete == nil {
		return *new([]BlockOperationResult), ErrNotSupported
	}
	return s.Internal.AnnounceBlocksWasDelete(p0, p1)
}

func (s *BlockStub) AnnounceBlocksWasDelete(p0 context.Context, p1 []string) ([]BlockOperationResult, error) {
	return *new([]BlockOperationResult), ErrNotSupported
}

func (s *BlockStruct) BlockStoreStat(p0 context.Context) (error) {
	if s.Internal.BlockStoreStat == nil {
		return ErrNotSupported
	}
	return s.Internal.BlockStoreStat(p0)
}

func (s *BlockStub) BlockStoreStat(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *BlockStruct) CacheBlocks(p0 context.Context, p1 []ReqCacheData) (CacheStat, error) {
	if s.Internal.CacheBlocks == nil {
		return *new(CacheStat), ErrNotSupported
	}
	return s.Internal.CacheBlocks(p0, p1)
}

func (s *BlockStub) CacheBlocks(p0 context.Context, p1 []ReqCacheData) (CacheStat, error) {
	return *new(CacheStat), ErrNotSupported
}

func (s *BlockStruct) DeleteAllBlocks(p0 context.Context) (error) {
	if s.Internal.DeleteAllBlocks == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteAllBlocks(p0)
}

func (s *BlockStub) DeleteAllBlocks(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *BlockStruct) DeleteBlocks(p0 context.Context, p1 []string) ([]BlockOperationResult, error) {
	if s.Internal.DeleteBlocks == nil {
		return *new([]BlockOperationResult), ErrNotSupported
	}
	return s.Internal.DeleteBlocks(p0, p1)
}

func (s *BlockStub) DeleteBlocks(p0 context.Context, p1 []string) ([]BlockOperationResult, error) {
	return *new([]BlockOperationResult), ErrNotSupported
}

func (s *BlockStruct) GetCID(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetCID == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetCID(p0, p1)
}

func (s *BlockStub) GetCID(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *BlockStruct) GetFID(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetFID == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetFID(p0, p1)
}

func (s *BlockStub) GetFID(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *BlockStruct) LoadBlock(p0 context.Context, p1 string) ([]byte, error) {
	if s.Internal.LoadBlock == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.LoadBlock(p0, p1)
}

func (s *BlockStub) LoadBlock(p0 context.Context, p1 string) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *BlockStruct) QueryCacheStat(p0 context.Context) (CacheStat, error) {
	if s.Internal.QueryCacheStat == nil {
		return *new(CacheStat), ErrNotSupported
	}
	return s.Internal.QueryCacheStat(p0)
}

func (s *BlockStub) QueryCacheStat(p0 context.Context) (CacheStat, error) {
	return *new(CacheStat), ErrNotSupported
}

func (s *BlockStruct) QueryCachingBlocks(p0 context.Context) (CachingBlockList, error) {
	if s.Internal.QueryCachingBlocks == nil {
		return *new(CachingBlockList), ErrNotSupported
	}
	return s.Internal.QueryCachingBlocks(p0)
}

func (s *BlockStub) QueryCachingBlocks(p0 context.Context) (CachingBlockList, error) {
	return *new(CachingBlockList), ErrNotSupported
}




func (s *CandidateStruct) ValidateBlocks(p0 context.Context, p1 []ReqValidate) (error) {
	if s.Internal.ValidateBlocks == nil {
		return ErrNotSupported
	}
	return s.Internal.ValidateBlocks(p0, p1)
}

func (s *CandidateStub) ValidateBlocks(p0 context.Context, p1 []ReqValidate) (error) {
	return ErrNotSupported
}

func (s *CandidateStruct) WaitQuiet(p0 context.Context) (error) {
	if s.Internal.WaitQuiet == nil {
		return ErrNotSupported
	}
	return s.Internal.WaitQuiet(p0)
}

func (s *CandidateStub) WaitQuiet(p0 context.Context) (error) {
	return ErrNotSupported
}




func (s *CommonStruct) AuthNew(p0 context.Context, p1 []auth.Permission) ([]byte, error) {
	if s.Internal.AuthNew == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.AuthNew(p0, p1)
}

func (s *CommonStub) AuthNew(p0 context.Context, p1 []auth.Permission) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *CommonStruct) AuthNodeNew(p0 context.Context, p1 []auth.Permission, p2 string) ([]byte, error) {
	if s.Internal.AuthNodeNew == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.AuthNodeNew(p0, p1, p2)
}

func (s *CommonStub) AuthNodeNew(p0 context.Context, p1 []auth.Permission, p2 string) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *CommonStruct) AuthNodeVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	if s.Internal.AuthNodeVerify == nil {
		return *new([]auth.Permission), ErrNotSupported
	}
	return s.Internal.AuthNodeVerify(p0, p1)
}

func (s *CommonStub) AuthNodeVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	return *new([]auth.Permission), ErrNotSupported
}

func (s *CommonStruct) AuthVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	if s.Internal.AuthVerify == nil {
		return *new([]auth.Permission), ErrNotSupported
	}
	return s.Internal.AuthVerify(p0, p1)
}

func (s *CommonStub) AuthVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	return *new([]auth.Permission), ErrNotSupported
}

func (s *CommonStruct) Closing(p0 context.Context) (<-chan struct{}, error) {
	if s.Internal.Closing == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.Closing(p0)
}

func (s *CommonStub) Closing(p0 context.Context) (<-chan struct{}, error) {
	return nil, ErrNotSupported
}

func (s *CommonStruct) Discover(p0 context.Context) (OpenRPCDocument, error) {
	if s.Internal.Discover == nil {
		return *new(OpenRPCDocument), ErrNotSupported
	}
	return s.Internal.Discover(p0)
}

func (s *CommonStub) Discover(p0 context.Context) (OpenRPCDocument, error) {
	return *new(OpenRPCDocument), ErrNotSupported
}

func (s *CommonStruct) LogAlerts(p0 context.Context) ([]alerting.Alert, error) {
	if s.Internal.LogAlerts == nil {
		return *new([]alerting.Alert), ErrNotSupported
	}
	return s.Internal.LogAlerts(p0)
}

func (s *CommonStub) LogAlerts(p0 context.Context) ([]alerting.Alert, error) {
	return *new([]alerting.Alert), ErrNotSupported
}

func (s *CommonStruct) LogList(p0 context.Context) ([]string, error) {
	if s.Internal.LogList == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.LogList(p0)
}

func (s *CommonStub) LogList(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *CommonStruct) LogSetLevel(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.LogSetLevel == nil {
		return ErrNotSupported
	}
	return s.Internal.LogSetLevel(p0, p1, p2)
}

func (s *CommonStub) LogSetLevel(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *CommonStruct) Session(p0 context.Context, p1 string) (uuid.UUID, error) {
	if s.Internal.Session == nil {
		return *new(uuid.UUID), ErrNotSupported
	}
	return s.Internal.Session(p0, p1)
}

func (s *CommonStub) Session(p0 context.Context, p1 string) (uuid.UUID, error) {
	return *new(uuid.UUID), ErrNotSupported
}

func (s *CommonStruct) Shutdown(p0 context.Context) (error) {
	if s.Internal.Shutdown == nil {
		return ErrNotSupported
	}
	return s.Internal.Shutdown(p0)
}

func (s *CommonStub) Shutdown(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *CommonStruct) Version(p0 context.Context) (APIVersion, error) {
	if s.Internal.Version == nil {
		return *new(APIVersion), ErrNotSupported
	}
	return s.Internal.Version(p0)
}

func (s *CommonStub) Version(p0 context.Context) (APIVersion, error) {
	return *new(APIVersion), ErrNotSupported
}




func (s *DataSyncStruct) GetAllChecksums(p0 context.Context, p1 int) (ChecksumRsp, error) {
	if s.Internal.GetAllChecksums == nil {
		return *new(ChecksumRsp), ErrNotSupported
	}
	return s.Internal.GetAllChecksums(p0, p1)
}

func (s *DataSyncStub) GetAllChecksums(p0 context.Context, p1 int) (ChecksumRsp, error) {
	return *new(ChecksumRsp), ErrNotSupported
}

func (s *DataSyncStruct) GetChecksumsInRange(p0 context.Context, p1 ReqChecksumInRange) (ChecksumRsp, error) {
	if s.Internal.GetChecksumsInRange == nil {
		return *new(ChecksumRsp), ErrNotSupported
	}
	return s.Internal.GetChecksumsInRange(p0, p1)
}

func (s *DataSyncStub) GetChecksumsInRange(p0 context.Context, p1 ReqChecksumInRange) (ChecksumRsp, error) {
	return *new(ChecksumRsp), ErrNotSupported
}

func (s *DataSyncStruct) ScrubBlocks(p0 context.Context, p1 ScrubBlocks) (error) {
	if s.Internal.ScrubBlocks == nil {
		return ErrNotSupported
	}
	return s.Internal.ScrubBlocks(p0, p1)
}

func (s *DataSyncStub) ScrubBlocks(p0 context.Context, p1 ScrubBlocks) (error) {
	return ErrNotSupported
}




func (s *DeviceStruct) DeviceInfo(p0 context.Context) (DevicesInfo, error) {
	if s.Internal.DeviceInfo == nil {
		return *new(DevicesInfo), ErrNotSupported
	}
	return s.Internal.DeviceInfo(p0)
}

func (s *DeviceStub) DeviceInfo(p0 context.Context) (DevicesInfo, error) {
	return *new(DevicesInfo), ErrNotSupported
}




func (s *DownloadStruct) SetDownloadSpeed(p0 context.Context, p1 int64) (error) {
	if s.Internal.SetDownloadSpeed == nil {
		return ErrNotSupported
	}
	return s.Internal.SetDownloadSpeed(p0, p1)
}

func (s *DownloadStub) SetDownloadSpeed(p0 context.Context, p1 int64) (error) {
	return ErrNotSupported
}




func (s *EdgeStruct) WaitQuiet(p0 context.Context) (error) {
	if s.Internal.WaitQuiet == nil {
		return ErrNotSupported
	}
	return s.Internal.WaitQuiet(p0)
}

func (s *EdgeStub) WaitQuiet(p0 context.Context) (error) {
	return ErrNotSupported
}




func (s *LocatorStruct) AddAccessPoints(p0 context.Context, p1 string, p2 string, p3 int, p4 string) (error) {
	if s.Internal.AddAccessPoints == nil {
		return ErrNotSupported
	}
	return s.Internal.AddAccessPoints(p0, p1, p2, p3, p4)
}

func (s *LocatorStub) AddAccessPoints(p0 context.Context, p1 string, p2 string, p3 int, p4 string) (error) {
	return ErrNotSupported
}

func (s *LocatorStruct) DeviceOffline(p0 context.Context, p1 string) (error) {
	if s.Internal.DeviceOffline == nil {
		return ErrNotSupported
	}
	return s.Internal.DeviceOffline(p0, p1)
}

func (s *LocatorStub) DeviceOffline(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *LocatorStruct) DeviceOnline(p0 context.Context, p1 string, p2 string, p3 int) (error) {
	if s.Internal.DeviceOnline == nil {
		return ErrNotSupported
	}
	return s.Internal.DeviceOnline(p0, p1, p2, p3)
}

func (s *LocatorStub) DeviceOnline(p0 context.Context, p1 string, p2 string, p3 int) (error) {
	return ErrNotSupported
}

func (s *LocatorStruct) GetAccessPoints(p0 context.Context, p1 string, p2 string) ([]SchedulerAuth, error) {
	if s.Internal.GetAccessPoints == nil {
		return *new([]SchedulerAuth), ErrNotSupported
	}
	return s.Internal.GetAccessPoints(p0, p1, p2)
}

func (s *LocatorStub) GetAccessPoints(p0 context.Context, p1 string, p2 string) ([]SchedulerAuth, error) {
	return *new([]SchedulerAuth), ErrNotSupported
}

func (s *LocatorStruct) GetDownloadInfoWithBlock(p0 context.Context, p1 string, p2 string) (DownloadInfoResult, error) {
	if s.Internal.GetDownloadInfoWithBlock == nil {
		return *new(DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetDownloadInfoWithBlock(p0, p1, p2)
}

func (s *LocatorStub) GetDownloadInfoWithBlock(p0 context.Context, p1 string, p2 string) (DownloadInfoResult, error) {
	return *new(DownloadInfoResult), ErrNotSupported
}

func (s *LocatorStruct) GetDownloadInfoWithBlocks(p0 context.Context, p1 []string, p2 string) (map[string]DownloadInfoResult, error) {
	if s.Internal.GetDownloadInfoWithBlocks == nil {
		return *new(map[string]DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetDownloadInfoWithBlocks(p0, p1, p2)
}

func (s *LocatorStub) GetDownloadInfoWithBlocks(p0 context.Context, p1 []string, p2 string) (map[string]DownloadInfoResult, error) {
	return *new(map[string]DownloadInfoResult), ErrNotSupported
}

func (s *LocatorStruct) GetDownloadInfosWithBlocks(p0 context.Context, p1 []string, p2 string) (map[string][]DownloadInfoResult, error) {
	if s.Internal.GetDownloadInfosWithBlocks == nil {
		return *new(map[string][]DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetDownloadInfosWithBlocks(p0, p1, p2)
}

func (s *LocatorStub) GetDownloadInfosWithBlocks(p0 context.Context, p1 []string, p2 string) (map[string][]DownloadInfoResult, error) {
	return *new(map[string][]DownloadInfoResult), ErrNotSupported
}

func (s *LocatorStruct) ListAccessPoints(p0 context.Context) ([]string, error) {
	if s.Internal.ListAccessPoints == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.ListAccessPoints(p0)
}

func (s *LocatorStub) ListAccessPoints(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *LocatorStruct) RemoveAccessPoints(p0 context.Context, p1 string) (error) {
	if s.Internal.RemoveAccessPoints == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveAccessPoints(p0, p1)
}

func (s *LocatorStub) RemoveAccessPoints(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *LocatorStruct) ShowAccessPoint(p0 context.Context, p1 string) (AccessPoint, error) {
	if s.Internal.ShowAccessPoint == nil {
		return *new(AccessPoint), ErrNotSupported
	}
	return s.Internal.ShowAccessPoint(p0, p1)
}

func (s *LocatorStub) ShowAccessPoint(p0 context.Context, p1 string) (AccessPoint, error) {
	return *new(AccessPoint), ErrNotSupported
}




func (s *SchedulerStruct) CacheCarfile(p0 context.Context, p1 string, p2 int, p3 int) (error) {
	if s.Internal.CacheCarfile == nil {
		return ErrNotSupported
	}
	return s.Internal.CacheCarfile(p0, p1, p2, p3)
}

func (s *SchedulerStub) CacheCarfile(p0 context.Context, p1 string, p2 int, p3 int) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) CacheContinue(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.CacheContinue == nil {
		return ErrNotSupported
	}
	return s.Internal.CacheContinue(p0, p1, p2)
}

func (s *SchedulerStub) CacheContinue(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) CacheResult(p0 context.Context, p1 string, p2 CacheResultInfo) (string, error) {
	if s.Internal.CacheResult == nil {
		return "", ErrNotSupported
	}
	return s.Internal.CacheResult(p0, p1, p2)
}

func (s *SchedulerStub) CacheResult(p0 context.Context, p1 string, p2 CacheResultInfo) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) CandidateNodeConnect(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.CandidateNodeConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.CandidateNodeConnect(p0, p1, p2)
}

func (s *SchedulerStub) CandidateNodeConnect(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) DeleteBlockRecords(p0 context.Context, p1 string, p2 []string) (map[string]string, error) {
	if s.Internal.DeleteBlockRecords == nil {
		return *new(map[string]string), ErrNotSupported
	}
	return s.Internal.DeleteBlockRecords(p0, p1, p2)
}

func (s *SchedulerStub) DeleteBlockRecords(p0 context.Context, p1 string, p2 []string) (map[string]string, error) {
	return *new(map[string]string), ErrNotSupported
}

func (s *SchedulerStruct) EdgeNodeConnect(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.EdgeNodeConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.EdgeNodeConnect(p0, p1, p2)
}

func (s *SchedulerStub) EdgeNodeConnect(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) ElectionValidators(p0 context.Context) (error) {
	if s.Internal.ElectionValidators == nil {
		return ErrNotSupported
	}
	return s.Internal.ElectionValidators(p0)
}

func (s *SchedulerStub) ElectionValidators(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) GetCandidateDownloadInfoWithBlocks(p0 context.Context, p1 []string) (map[string]DownloadInfoResult, error) {
	if s.Internal.GetCandidateDownloadInfoWithBlocks == nil {
		return *new(map[string]DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetCandidateDownloadInfoWithBlocks(p0, p1)
}

func (s *SchedulerStub) GetCandidateDownloadInfoWithBlocks(p0 context.Context, p1 []string) (map[string]DownloadInfoResult, error) {
	return *new(map[string]DownloadInfoResult), ErrNotSupported
}

func (s *SchedulerStruct) GetDevicesInfo(p0 context.Context, p1 string) (DevicesInfo, error) {
	if s.Internal.GetDevicesInfo == nil {
		return *new(DevicesInfo), ErrNotSupported
	}
	return s.Internal.GetDevicesInfo(p0, p1)
}

func (s *SchedulerStub) GetDevicesInfo(p0 context.Context, p1 string) (DevicesInfo, error) {
	return *new(DevicesInfo), ErrNotSupported
}

func (s *SchedulerStruct) GetDownloadInfo(p0 context.Context, p1 string) ([]*BlockDownloadInfo, error) {
	if s.Internal.GetDownloadInfo == nil {
		return *new([]*BlockDownloadInfo), ErrNotSupported
	}
	return s.Internal.GetDownloadInfo(p0, p1)
}

func (s *SchedulerStub) GetDownloadInfo(p0 context.Context, p1 string) ([]*BlockDownloadInfo, error) {
	return *new([]*BlockDownloadInfo), ErrNotSupported
}

func (s *SchedulerStruct) GetDownloadInfoWithBlock(p0 context.Context, p1 string, p2 string) (DownloadInfoResult, error) {
	if s.Internal.GetDownloadInfoWithBlock == nil {
		return *new(DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetDownloadInfoWithBlock(p0, p1, p2)
}

func (s *SchedulerStub) GetDownloadInfoWithBlock(p0 context.Context, p1 string, p2 string) (DownloadInfoResult, error) {
	return *new(DownloadInfoResult), ErrNotSupported
}

func (s *SchedulerStruct) GetDownloadInfoWithBlocks(p0 context.Context, p1 []string, p2 string) (map[string]DownloadInfoResult, error) {
	if s.Internal.GetDownloadInfoWithBlocks == nil {
		return *new(map[string]DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetDownloadInfoWithBlocks(p0, p1, p2)
}

func (s *SchedulerStub) GetDownloadInfoWithBlocks(p0 context.Context, p1 []string, p2 string) (map[string]DownloadInfoResult, error) {
	return *new(map[string]DownloadInfoResult), ErrNotSupported
}

func (s *SchedulerStruct) GetDownloadInfosWithBlocks(p0 context.Context, p1 []string, p2 string) (map[string][]DownloadInfoResult, error) {
	if s.Internal.GetDownloadInfosWithBlocks == nil {
		return *new(map[string][]DownloadInfoResult), ErrNotSupported
	}
	return s.Internal.GetDownloadInfosWithBlocks(p0, p1, p2)
}

func (s *SchedulerStub) GetDownloadInfosWithBlocks(p0 context.Context, p1 []string, p2 string) (map[string][]DownloadInfoResult, error) {
	return *new(map[string][]DownloadInfoResult), ErrNotSupported
}

func (s *SchedulerStruct) GetExternalIP(p0 context.Context) (string, error) {
	if s.Internal.GetExternalIP == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetExternalIP(p0)
}

func (s *SchedulerStub) GetExternalIP(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) GetOnlineDeviceIDs(p0 context.Context, p1 NodeTypeName) ([]string, error) {
	if s.Internal.GetOnlineDeviceIDs == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetOnlineDeviceIDs(p0, p1)
}

func (s *SchedulerStub) GetOnlineDeviceIDs(p0 context.Context, p1 NodeTypeName) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *SchedulerStruct) GetPublicKey(p0 context.Context) (string, error) {
	if s.Internal.GetPublicKey == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetPublicKey(p0)
}

func (s *SchedulerStub) GetPublicKey(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) GetValidationInfo(p0 context.Context) (ValidationInfo, error) {
	if s.Internal.GetValidationInfo == nil {
		return *new(ValidationInfo), ErrNotSupported
	}
	return s.Internal.GetValidationInfo(p0)
}

func (s *SchedulerStub) GetValidationInfo(p0 context.Context) (ValidationInfo, error) {
	return *new(ValidationInfo), ErrNotSupported
}

func (s *SchedulerStruct) ListDatas(p0 context.Context, p1 int) (DataListInfo, error) {
	if s.Internal.ListDatas == nil {
		return *new(DataListInfo), ErrNotSupported
	}
	return s.Internal.ListDatas(p0, p1)
}

func (s *SchedulerStub) ListDatas(p0 context.Context, p1 int) (DataListInfo, error) {
	return *new(DataListInfo), ErrNotSupported
}

func (s *SchedulerStruct) ListEvents(p0 context.Context, p1 int) (EventListInfo, error) {
	if s.Internal.ListEvents == nil {
		return *new(EventListInfo), ErrNotSupported
	}
	return s.Internal.ListEvents(p0, p1)
}

func (s *SchedulerStub) ListEvents(p0 context.Context, p1 int) (EventListInfo, error) {
	return *new(EventListInfo), ErrNotSupported
}

func (s *SchedulerStruct) LocatorConnect(p0 context.Context, p1 int, p2 string, p3 string, p4 string) (error) {
	if s.Internal.LocatorConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.LocatorConnect(p0, p1, p2, p3, p4)
}

func (s *SchedulerStub) LocatorConnect(p0 context.Context, p1 int, p2 string, p3 string, p4 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) NodeDownloadBlockResult(p0 context.Context, p1 NodeBlockDownloadResult) (error) {
	if s.Internal.NodeDownloadBlockResult == nil {
		return ErrNotSupported
	}
	return s.Internal.NodeDownloadBlockResult(p0, p1)
}

func (s *SchedulerStub) NodeDownloadBlockResult(p0 context.Context, p1 NodeBlockDownloadResult) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) QueryCacheStatWithNode(p0 context.Context, p1 string) ([]CacheStat, error) {
	if s.Internal.QueryCacheStatWithNode == nil {
		return *new([]CacheStat), ErrNotSupported
	}
	return s.Internal.QueryCacheStatWithNode(p0, p1)
}

func (s *SchedulerStub) QueryCacheStatWithNode(p0 context.Context, p1 string) ([]CacheStat, error) {
	return *new([]CacheStat), ErrNotSupported
}

func (s *SchedulerStruct) QueryCachingBlocksWithNode(p0 context.Context, p1 string) (CachingBlockList, error) {
	if s.Internal.QueryCachingBlocksWithNode == nil {
		return *new(CachingBlockList), ErrNotSupported
	}
	return s.Internal.QueryCachingBlocksWithNode(p0, p1)
}

func (s *SchedulerStub) QueryCachingBlocksWithNode(p0 context.Context, p1 string) (CachingBlockList, error) {
	return *new(CachingBlockList), ErrNotSupported
}

func (s *SchedulerStruct) RegisterNode(p0 context.Context, p1 NodeType) (NodeRegisterInfo, error) {
	if s.Internal.RegisterNode == nil {
		return *new(NodeRegisterInfo), ErrNotSupported
	}
	return s.Internal.RegisterNode(p0, p1)
}

func (s *SchedulerStub) RegisterNode(p0 context.Context, p1 NodeType) (NodeRegisterInfo, error) {
	return *new(NodeRegisterInfo), ErrNotSupported
}

func (s *SchedulerStruct) RemoveCache(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.RemoveCache == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveCache(p0, p1, p2)
}

func (s *SchedulerStub) RemoveCache(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) RemoveCarfile(p0 context.Context, p1 string) (error) {
	if s.Internal.RemoveCarfile == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveCarfile(p0, p1)
}

func (s *SchedulerStub) RemoveCarfile(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) ShowDataTask(p0 context.Context, p1 string) (CacheDataInfo, error) {
	if s.Internal.ShowDataTask == nil {
		return *new(CacheDataInfo), ErrNotSupported
	}
	return s.Internal.ShowDataTask(p0, p1)
}

func (s *SchedulerStub) ShowDataTask(p0 context.Context, p1 string) (CacheDataInfo, error) {
	return *new(CacheDataInfo), ErrNotSupported
}

func (s *SchedulerStruct) ShowDataTasks(p0 context.Context) ([]CacheDataInfo, error) {
	if s.Internal.ShowDataTasks == nil {
		return *new([]CacheDataInfo), ErrNotSupported
	}
	return s.Internal.ShowDataTasks(p0)
}

func (s *SchedulerStub) ShowDataTasks(p0 context.Context) ([]CacheDataInfo, error) {
	return *new([]CacheDataInfo), ErrNotSupported
}

func (s *SchedulerStruct) StateNetwork(p0 context.Context) (StateNetwork, error) {
	if s.Internal.StateNetwork == nil {
		return *new(StateNetwork), ErrNotSupported
	}
	return s.Internal.StateNetwork(p0)
}

func (s *SchedulerStub) StateNetwork(p0 context.Context) (StateNetwork, error) {
	return *new(StateNetwork), ErrNotSupported
}

func (s *SchedulerStruct) UserDownloadBlockResults(p0 context.Context, p1 []UserBlockDownloadResult) (error) {
	if s.Internal.UserDownloadBlockResults == nil {
		return ErrNotSupported
	}
	return s.Internal.UserDownloadBlockResults(p0, p1)
}

func (s *SchedulerStub) UserDownloadBlockResults(p0 context.Context, p1 []UserBlockDownloadResult) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) Validate(p0 context.Context) (error) {
	if s.Internal.Validate == nil {
		return ErrNotSupported
	}
	return s.Internal.Validate(p0)
}

func (s *SchedulerStub) Validate(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) ValidateBlockResult(p0 context.Context, p1 ValidateResults) (error) {
	if s.Internal.ValidateBlockResult == nil {
		return ErrNotSupported
	}
	return s.Internal.ValidateBlockResult(p0, p1)
}

func (s *SchedulerStub) ValidateBlockResult(p0 context.Context, p1 ValidateResults) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) ValidateSwitch(p0 context.Context, p1 bool) (error) {
	if s.Internal.ValidateSwitch == nil {
		return ErrNotSupported
	}
	return s.Internal.ValidateSwitch(p0, p1)
}

func (s *SchedulerStub) ValidateSwitch(p0 context.Context, p1 bool) (error) {
	return ErrNotSupported
}




func (s *ValidateStruct) BeValidate(p0 context.Context, p1 ReqValidate, p2 string) (error) {
	if s.Internal.BeValidate == nil {
		return ErrNotSupported
	}
	return s.Internal.BeValidate(p0, p1, p2)
}

func (s *ValidateStub) BeValidate(p0 context.Context, p1 ReqValidate, p2 string) (error) {
	return ErrNotSupported
}




func (s *WebStruct) AddCacheTask(p0 context.Context, p1 string, p2 int, p3 int) (error) {
	if s.Internal.AddCacheTask == nil {
		return ErrNotSupported
	}
	return s.Internal.AddCacheTask(p0, p1, p2, p3)
}

func (s *WebStub) AddCacheTask(p0 context.Context, p1 string, p2 int, p3 int) (error) {
	return ErrNotSupported
}

func (s *WebStruct) CancelCacheTask(p0 context.Context, p1 string) (error) {
	if s.Internal.CancelCacheTask == nil {
		return ErrNotSupported
	}
	return s.Internal.CancelCacheTask(p0, p1)
}

func (s *WebStub) CancelCacheTask(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *WebStruct) GetCacheTaskInfo(p0 context.Context, p1 string) (CacheDataInfo, error) {
	if s.Internal.GetCacheTaskInfo == nil {
		return *new(CacheDataInfo), ErrNotSupported
	}
	return s.Internal.GetCacheTaskInfo(p0, p1)
}

func (s *WebStub) GetCacheTaskInfo(p0 context.Context, p1 string) (CacheDataInfo, error) {
	return *new(CacheDataInfo), ErrNotSupported
}

func (s *WebStruct) GetCarfileByCID(p0 context.Context, p1 string) (WebCarfile, error) {
	if s.Internal.GetCarfileByCID == nil {
		return *new(WebCarfile), ErrNotSupported
	}
	return s.Internal.GetCarfileByCID(p0, p1)
}

func (s *WebStub) GetCarfileByCID(p0 context.Context, p1 string) (WebCarfile, error) {
	return *new(WebCarfile), ErrNotSupported
}

func (s *WebStruct) GetNodeInfoByID(p0 context.Context, p1 string) (DevicesInfo, error) {
	if s.Internal.GetNodeInfoByID == nil {
		return *new(DevicesInfo), ErrNotSupported
	}
	return s.Internal.GetNodeInfoByID(p0, p1)
}

func (s *WebStub) GetNodeInfoByID(p0 context.Context, p1 string) (DevicesInfo, error) {
	return *new(DevicesInfo), ErrNotSupported
}

func (s *WebStruct) GetValidationInfo(p0 context.Context) (ValidationInfo, error) {
	if s.Internal.GetValidationInfo == nil {
		return *new(ValidationInfo), ErrNotSupported
	}
	return s.Internal.GetValidationInfo(p0)
}

func (s *WebStub) GetValidationInfo(p0 context.Context) (ValidationInfo, error) {
	return *new(ValidationInfo), ErrNotSupported
}

func (s *WebStruct) ListBlockDownloadInfo(p0 context.Context, p1 ListBlockDownloadInfoReq) (ListBlockDownloadInfoRsp, error) {
	if s.Internal.ListBlockDownloadInfo == nil {
		return *new(ListBlockDownloadInfoRsp), ErrNotSupported
	}
	return s.Internal.ListBlockDownloadInfo(p0, p1)
}

func (s *WebStub) ListBlockDownloadInfo(p0 context.Context, p1 ListBlockDownloadInfoReq) (ListBlockDownloadInfoRsp, error) {
	return *new(ListBlockDownloadInfoRsp), ErrNotSupported
}

func (s *WebStruct) ListCacheTasks(p0 context.Context, p1 int, p2 int) (ListCacheTasksRsp, error) {
	if s.Internal.ListCacheTasks == nil {
		return *new(ListCacheTasksRsp), ErrNotSupported
	}
	return s.Internal.ListCacheTasks(p0, p1, p2)
}

func (s *WebStub) ListCacheTasks(p0 context.Context, p1 int, p2 int) (ListCacheTasksRsp, error) {
	return *new(ListCacheTasksRsp), ErrNotSupported
}

func (s *WebStruct) ListCaches(p0 context.Context, p1 ListCachesReq) (ListCachesRsp, error) {
	if s.Internal.ListCaches == nil {
		return *new(ListCachesRsp), ErrNotSupported
	}
	return s.Internal.ListCaches(p0, p1)
}

func (s *WebStub) ListCaches(p0 context.Context, p1 ListCachesReq) (ListCachesRsp, error) {
	return *new(ListCachesRsp), ErrNotSupported
}

func (s *WebStruct) ListNodeConnectionLog(p0 context.Context, p1 ListNodeConnectionLogReq) (ListNodeConnectionLogRsp, error) {
	if s.Internal.ListNodeConnectionLog == nil {
		return *new(ListNodeConnectionLogRsp), ErrNotSupported
	}
	return s.Internal.ListNodeConnectionLog(p0, p1)
}

func (s *WebStub) ListNodeConnectionLog(p0 context.Context, p1 ListNodeConnectionLogReq) (ListNodeConnectionLogRsp, error) {
	return *new(ListNodeConnectionLogRsp), ErrNotSupported
}

func (s *WebStruct) ListNodes(p0 context.Context, p1 int, p2 int) (ListNodesRsp, error) {
	if s.Internal.ListNodes == nil {
		return *new(ListNodesRsp), ErrNotSupported
	}
	return s.Internal.ListNodes(p0, p1, p2)
}

func (s *WebStub) ListNodes(p0 context.Context, p1 int, p2 int) (ListNodesRsp, error) {
	return *new(ListNodesRsp), ErrNotSupported
}

func (s *WebStruct) ListValidateResult(p0 context.Context, p1 int, p2 int) (ListValidateResultRsp, error) {
	if s.Internal.ListValidateResult == nil {
		return *new(ListValidateResultRsp), ErrNotSupported
	}
	return s.Internal.ListValidateResult(p0, p1, p2)
}

func (s *WebStub) ListValidateResult(p0 context.Context, p1 int, p2 int) (ListValidateResultRsp, error) {
	return *new(ListValidateResultRsp), ErrNotSupported
}

func (s *WebStruct) RemoveCarfile(p0 context.Context, p1 string) (error) {
	if s.Internal.RemoveCarfile == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveCarfile(p0, p1)
}

func (s *WebStub) RemoveCarfile(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *WebStruct) SetupValidation(p0 context.Context, p1 bool) (error) {
	if s.Internal.SetupValidation == nil {
		return ErrNotSupported
	}
	return s.Internal.SetupValidation(p0, p1)
}

func (s *WebStub) SetupValidation(p0 context.Context, p1 bool) (error) {
	return ErrNotSupported
}

func (s *WebStruct) StatCaches(p0 context.Context) (StatCachesRsp, error) {
	if s.Internal.StatCaches == nil {
		return *new(StatCachesRsp), ErrNotSupported
	}
	return s.Internal.StatCaches(p0)
}

func (s *WebStub) StatCaches(p0 context.Context) (StatCachesRsp, error) {
	return *new(StatCachesRsp), ErrNotSupported
}



var _ Block = new(BlockStruct)
var _ Candidate = new(CandidateStruct)
var _ Common = new(CommonStruct)
var _ DataSync = new(DataSyncStruct)
var _ Device = new(DeviceStruct)
var _ Download = new(DownloadStruct)
var _ Edge = new(EdgeStruct)
var _ Locator = new(LocatorStruct)
var _ Scheduler = new(SchedulerStruct)
var _ Validate = new(ValidateStruct)
var _ Web = new(WebStruct)


